package mts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryJobList(request *QueryJobListRequest) (response *QueryJobListResponse, err error) {
	response = CreateQueryJobListResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryJobListWithChan(request *QueryJobListRequest) (<-chan *QueryJobListResponse, <-chan error) {
	responseChan := make(chan *QueryJobListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryJobList(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryJobListWithCallback(request *QueryJobListRequest, callback func(response *QueryJobListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryJobListResponse
		var err error
		defer close(result)
		response, err = client.QueryJobList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryJobListRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	JobIds               string `position:"Query" name:"JobIds"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	Action               string `position:"Query" name:"Action"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	AccessKeyId          string `position:"Query" name:"AccessKeyId"`
}

type QueryJobListResponse struct {
	*responses.BaseResponse
	RequestId      string   `json:"RequestId"`
	NonExistJobIds []string `json:"NonExistJobIds"`
	JobList        []struct {
		JobId        string `json:"JobId"`
		State        string `json:"State"`
		Code         string `json:"Code"`
		Message      string `json:"Message"`
		Percent      int64  `json:"Percent"`
		PipelineId   string `json:"PipelineId"`
		CreationTime string `json:"CreationTime"`
		FinishTime   string `json:"FinishTime"`
		Input        struct {
			Bucket   string `json:"Bucket"`
			Location string `json:"Location"`
			Object   string `json:"Object"`
		} `json:"Input"`
		Output struct {
			TemplateId         string `json:"TemplateId"`
			UserData           string `json:"UserData"`
			Rotate             string `json:"Rotate"`
			VideoStreamMap     string `json:"VideoStreamMap"`
			AudioStreamMap     string `json:"AudioStreamMap"`
			DeWatermark        string `json:"DeWatermark"`
			Priority           string `json:"Priority"`
			WaterMarkConfigUrl string `json:"WaterMarkConfigUrl"`
			MergeConfigUrl     string `json:"MergeConfigUrl"`
			OutputFile         struct {
				Bucket   string `json:"Bucket"`
				Location string `json:"Location"`
				Object   string `json:"Object"`
				RoleArn  string `json:"RoleArn"`
			} `json:"OutputFile"`
			M3U8NonStandardSupport struct {
				TS struct {
					Md5Support  bool `json:"Md5Support"`
					SizeSupport bool `json:"SizeSupport"`
				} `json:"TS"`
			} `json:"M3U8NonStandardSupport"`
			Properties struct {
				Width      string `json:"Width"`
				Height     string `json:"Height"`
				Bitrate    string `json:"Bitrate"`
				Duration   string `json:"Duration"`
				Fps        string `json:"Fps"`
				FileSize   string `json:"FileSize"`
				FileFormat string `json:"FileFormat"`
				Streams    struct {
					VideoStreamList []struct {
						Index          string `json:"Index"`
						CodecName      string `json:"CodecName"`
						CodecLongName  string `json:"CodecLongName"`
						Profile        string `json:"Profile"`
						CodecTimeBase  string `json:"CodecTimeBase"`
						CodecTagString string `json:"CodecTagString"`
						CodecTag       string `json:"CodecTag"`
						Width          string `json:"Width"`
						Height         string `json:"Height"`
						HasBFrames     string `json:"HasBFrames"`
						Sar            string `json:"Sar"`
						Dar            string `json:"Dar"`
						PixFmt         string `json:"PixFmt"`
						Level          string `json:"Level"`
						Fps            string `json:"Fps"`
						AvgFPS         string `json:"AvgFPS"`
						Timebase       string `json:"Timebase"`
						StartTime      string `json:"StartTime"`
						Duration       string `json:"Duration"`
						Bitrate        string `json:"Bitrate"`
						NumFrames      string `json:"NumFrames"`
						Lang           string `json:"Lang"`
						NetworkCost    struct {
							PreloadTime   string `json:"PreloadTime"`
							CostBandwidth string `json:"CostBandwidth"`
							AvgBitrate    string `json:"AvgBitrate"`
						} `json:"NetworkCost"`
					} `json:"VideoStreamList"`
					AudioStreamList []struct {
						Index          string `json:"Index"`
						CodecName      string `json:"CodecName"`
						CodecTimeBase  string `json:"CodecTimeBase"`
						CodecLongName  string `json:"CodecLongName"`
						CodecTagString string `json:"CodecTagString"`
						CodecTag       string `json:"CodecTag"`
						SampleFmt      string `json:"SampleFmt"`
						Samplerate     string `json:"Samplerate"`
						Channels       string `json:"Channels"`
						ChannelLayout  string `json:"ChannelLayout"`
						Timebase       string `json:"Timebase"`
						StartTime      string `json:"StartTime"`
						Duration       string `json:"Duration"`
						Bitrate        string `json:"Bitrate"`
						NumFrames      string `json:"NumFrames"`
						Lang           string `json:"Lang"`
					} `json:"AudioStreamList"`
					SubtitleStreamList []struct {
						Index string `json:"Index"`
						Lang  string `json:"Lang"`
					} `json:"SubtitleStreamList"`
				} `json:"Streams"`
				Format struct {
					NumStreams     string `json:"NumStreams"`
					NumPrograms    string `json:"NumPrograms"`
					FormatName     string `json:"FormatName"`
					FormatLongName string `json:"FormatLongName"`
					StartTime      string `json:"StartTime"`
					Duration       string `json:"Duration"`
					Size           string `json:"Size"`
					Bitrate        string `json:"Bitrate"`
				} `json:"Format"`
				SourceLogos []struct {
					Source string `json:"Source"`
				} `json:"SourceLogos"`
			} `json:"Properties"`
			Clip struct {
				TimeSpan struct {
					Seek     string `json:"Seek"`
					Duration string `json:"Duration"`
				} `json:"TimeSpan"`
			} `json:"Clip"`
			SuperReso struct {
				IsHalfSample string `json:"IsHalfSample"`
			} `json:"SuperReso"`
			SubtitleConfig struct {
				SubtitleList []struct {
					Map string `json:"Map"`
				} `json:"SubtitleList"`
				ExtSubtitleList []struct {
					FontName string `json:"FontName"`
					CharEnc  string `json:"CharEnc"`
					Input1   struct {
						Bucket   string `json:"Bucket"`
						Location string `json:"Location"`
						Object   string `json:"Object"`
					} `json:"Input"`
				} `json:"ExtSubtitleList"`
			} `json:"SubtitleConfig"`
			TransConfig struct {
				TransMode               string `json:"TransMode"`
				IsCheckReso             string `json:"IsCheckReso"`
				IsCheckResoFail         string `json:"IsCheckResoFail"`
				IsCheckVideoBitrate     string `json:"IsCheckVideoBitrate"`
				IsCheckAudioBitrate     string `json:"IsCheckAudioBitrate"`
				AdjDarMethod            string `json:"AdjDarMethod"`
				IsCheckVideoBitrateFail string `json:"IsCheckVideoBitrateFail"`
				IsCheckAudioBitrateFail string `json:"IsCheckAudioBitrateFail"`
			} `json:"TransConfig"`
			MuxConfig struct {
				Segment struct {
					Duration string `json:"Duration"`
				} `json:"Segment"`
				Gif struct {
					Loop            string `json:"Loop"`
					FinalDelay      string `json:"FinalDelay"`
					IsCustomPalette string `json:"IsCustomPalette"`
					DitherMode      string `json:"DitherMode"`
				} `json:"Gif"`
			} `json:"MuxConfig"`
			Audio struct {
				Codec      string `json:"Codec"`
				Profile    string `json:"Profile"`
				Samplerate string `json:"Samplerate"`
				Bitrate    string `json:"Bitrate"`
				Channels   string `json:"Channels"`
				Qscale     string `json:"Qscale"`
				Volume     struct {
					Level  string `json:"Level"`
					Method string `json:"Method"`
				} `json:"Volume"`
			} `json:"Audio"`
			Video struct {
				Codec      string `json:"Codec"`
				Profile    string `json:"Profile"`
				Bitrate    string `json:"Bitrate"`
				Crf        string `json:"Crf"`
				Width      string `json:"Width"`
				Height     string `json:"Height"`
				Fps        string `json:"Fps"`
				Gop        string `json:"Gop"`
				Preset     string `json:"Preset"`
				ScanMode   string `json:"ScanMode"`
				Bufsize    string `json:"Bufsize"`
				Maxrate    string `json:"Maxrate"`
				PixFmt     string `json:"PixFmt"`
				Degrain    string `json:"Degrain"`
				Qscale     string `json:"Qscale"`
				Crop       string `json:"Crop"`
				Pad        string `json:"Pad"`
				MaxFps     string `json:"MaxFps"`
				BitrateBnd struct {
					Max string `json:"Max"`
					Min string `json:"Min"`
				} `json:"BitrateBnd"`
			} `json:"Video"`
			Container struct {
				Format string `json:"Format"`
			} `json:"Container"`
			Encryption struct {
				Type    string `json:"Type"`
				Id      string `json:"Id"`
				Key     string `json:"Key"`
				KeyUri  string `json:"KeyUri"`
				KeyType string `json:"KeyType"`
				SkipCnt string `json:"SkipCnt"`
			} `json:"Encryption"`
			WaterMarkList []struct {
				WaterMarkTemplateId string `json:"WaterMarkTemplateId"`
				Width               string `json:"Width"`
				Height              string `json:"Height"`
				Dx                  string `json:"Dx"`
				Dy                  string `json:"Dy"`
				ReferPos            string `json:"ReferPos"`
				Type                string `json:"Type"`
				InputFile           struct {
					Bucket   string `json:"Bucket"`
					Location string `json:"Location"`
					Object   string `json:"Object"`
				} `json:"InputFile"`
			} `json:"WaterMarkList"`
			MergeList []struct {
				MergeURL string `json:"MergeURL"`
				Start    string `json:"Start"`
				Duration string `json:"Duration"`
				RoleArn  string `json:"RoleArn"`
			} `json:"MergeList"`
			OpeningList []struct {
				OpenUrl string `json:"openUrl"`
				Start   string `json:"Start"`
				Width   string `json:"Width"`
				Height  string `json:"Height"`
			} `json:"OpeningList"`
			TailSlateList []struct {
				TailUrl       string `json:"TailUrl"`
				Start         string `json:"Start"`
				BlendDuration string `json:"BlendDuration"`
				Width         string `json:"Width"`
				Height        string `json:"Height"`
				IsMergeAudio  bool   `json:"IsMergeAudio"`
				BgColor       string `json:"BgColor"`
			} `json:"TailSlateList"`
		} `json:"Output"`
		MNSMessageResult struct {
			MessageId    string `json:"MessageId"`
			ErrorMessage string `json:"ErrorMessage"`
			ErrorCode    string `json:"ErrorCode"`
		} `json:"MNSMessageResult"`
	} `json:"JobList"`
}

func CreateQueryJobListRequest() (request *QueryJobListRequest) {
	request = &QueryJobListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Mts", "2014-06-18", "QueryJobList", "", "")
	return
}

func CreateQueryJobListResponse() (response *QueryJobListResponse) {
	response = &QueryJobListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
