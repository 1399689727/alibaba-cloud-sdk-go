package mts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryMediaListByURL(request *QueryMediaListByURLRequest) (response *QueryMediaListByURLResponse, err error) {
	response = CreateQueryMediaListByURLResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryMediaListByURLWithChan(request *QueryMediaListByURLRequest) (<-chan *QueryMediaListByURLResponse, <-chan error) {
	responseChan := make(chan *QueryMediaListByURLResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryMediaListByURL(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryMediaListByURLWithCallback(request *QueryMediaListByURLRequest, callback func(response *QueryMediaListByURLResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryMediaListByURLResponse
		var err error
		defer close(result)
		response, err = client.QueryMediaListByURL(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryMediaListByURLRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	IncludeSnapshotList  string `position:"Query" name:"IncludeSnapshotList"`
	FileURLs             string `position:"Query" name:"FileURLs"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	Action               string `position:"Query" name:"Action"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	IncludePlayList      string `position:"Query" name:"IncludePlayList"`
	AccessKeyId          string `position:"Query" name:"AccessKeyId"`
	IncludeMediaInfo     string `position:"Query" name:"IncludeMediaInfo"`
}

type QueryMediaListByURLResponse struct {
	*responses.BaseResponse
	RequestId        string   `json:"RequestId"`
	NonExistFileURLs []string `json:"NonExistFileURLs"`
	MediaList        []struct {
		MediaId      string   `json:"MediaId"`
		Title        string   `json:"Title"`
		Description  string   `json:"Description"`
		CoverURL     string   `json:"CoverURL"`
		CateId       int64    `json:"CateId"`
		Duration     string   `json:"Duration"`
		Format       string   `json:"Format"`
		Size         string   `json:"Size"`
		Bitrate      string   `json:"Bitrate"`
		Width        string   `json:"Width"`
		Height       string   `json:"Height"`
		Fps          string   `json:"Fps"`
		PublishState string   `json:"PublishState"`
		CreationTime string   `json:"CreationTime"`
		Tags         []string `json:"Tags"`
		RunIdList    []string `json:"RunIdList"`
		File         struct {
			URL   string `json:"URL"`
			State string `json:"State"`
		} `json:"File"`
		MediaInfo struct {
			Streams struct {
				VideoStreamList []struct {
					Index          string `json:"Index"`
					CodecName      string `json:"CodecName"`
					CodecLongName  string `json:"CodecLongName"`
					Profile        string `json:"Profile"`
					CodecTimeBase  string `json:"CodecTimeBase"`
					CodecTagString string `json:"CodecTagString"`
					CodecTag       string `json:"CodecTag"`
					Width          string `json:"Width"`
					Height         string `json:"Height"`
					HasBFrames     string `json:"HasBFrames"`
					Sar            string `json:"Sar"`
					Dar            string `json:"Dar"`
					PixFmt         string `json:"PixFmt"`
					Level          string `json:"Level"`
					Fps            string `json:"Fps"`
					AvgFPS         string `json:"AvgFPS"`
					Timebase       string `json:"Timebase"`
					StartTime      string `json:"StartTime"`
					Duration       string `json:"Duration"`
					Bitrate        string `json:"Bitrate"`
					NumFrames      string `json:"NumFrames"`
					Lang           string `json:"Lang"`
					Rotate         string `json:"Rotate"`
					NetworkCost    struct {
						PreloadTime   string `json:"PreloadTime"`
						CostBandwidth string `json:"CostBandwidth"`
						AvgBitrate    string `json:"AvgBitrate"`
					} `json:"NetworkCost"`
				} `json:"VideoStreamList"`
				AudioStreamList []struct {
					Index          string `json:"Index"`
					CodecName      string `json:"CodecName"`
					CodecTimeBase  string `json:"CodecTimeBase"`
					CodecLongName  string `json:"CodecLongName"`
					CodecTagString string `json:"CodecTagString"`
					CodecTag       string `json:"CodecTag"`
					SampleFmt      string `json:"SampleFmt"`
					Samplerate     string `json:"Samplerate"`
					Channels       string `json:"Channels"`
					ChannelLayout  string `json:"ChannelLayout"`
					Timebase       string `json:"Timebase"`
					StartTime      string `json:"StartTime"`
					Duration       string `json:"Duration"`
					Bitrate        string `json:"Bitrate"`
					NumFrames      string `json:"NumFrames"`
					Lang           string `json:"Lang"`
				} `json:"AudioStreamList"`
				SubtitleStreamList []struct {
					Index string `json:"Index"`
					Lang  string `json:"Lang"`
				} `json:"SubtitleStreamList"`
			} `json:"Streams"`
			Format struct {
				NumStreams     string `json:"NumStreams"`
				NumPrograms    string `json:"NumPrograms"`
				FormatName     string `json:"FormatName"`
				FormatLongName string `json:"FormatLongName"`
				StartTime      string `json:"StartTime"`
				Duration       string `json:"Duration"`
				Size           string `json:"Size"`
				Bitrate        string `json:"Bitrate"`
			} `json:"Format"`
		} `json:"MediaInfo"`
		PlayList []struct {
			ActivityName      string `json:"ActivityName"`
			MediaWorkflowId   string `json:"MediaWorkflowId"`
			MediaWorkflowName string `json:"MediaWorkflowName"`
			Duration          string `json:"Duration"`
			Format            string `json:"Format"`
			Size              string `json:"Size"`
			Bitrate           string `json:"Bitrate"`
			Width             string `json:"Width"`
			Height            string `json:"Height"`
			Fps               string `json:"Fps"`
			Encryption        string `json:"Encryption"`
			File1             struct {
				URL   string `json:"URL"`
				State string `json:"State"`
			} `json:"File"`
		} `json:"PlayList"`
		SnapshotList []struct {
			Type              string `json:"Type"`
			MediaWorkflowId   string `json:"MediaWorkflowId"`
			MediaWorkflowName string `json:"MediaWorkflowName"`
			ActivityName      string `json:"ActivityName"`
			Count             string `json:"Count"`
			File2             struct {
				URL   string `json:"URL"`
				State string `json:"State"`
			} `json:"File"`
		} `json:"SnapshotList"`
	} `json:"MediaList"`
}

func CreateQueryMediaListByURLRequest() (request *QueryMediaListByURLRequest) {
	request = &QueryMediaListByURLRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Mts", "2014-06-18", "QueryMediaListByURL", "", "")
	return
}

func CreateQueryMediaListByURLResponse() (response *QueryMediaListByURLResponse) {
	response = &QueryMediaListByURLResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
