package mts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) SubmitSnapshotJob(request *SubmitSnapshotJobRequest) (response *SubmitSnapshotJobResponse, err error) {
	response = CreateSubmitSnapshotJobResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) SubmitSnapshotJobWithChan(request *SubmitSnapshotJobRequest) (<-chan *SubmitSnapshotJobResponse, <-chan error) {
	responseChan := make(chan *SubmitSnapshotJobResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SubmitSnapshotJob(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) SubmitSnapshotJobWithCallback(request *SubmitSnapshotJobRequest, callback func(response *SubmitSnapshotJobResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SubmitSnapshotJobResponse
		var err error
		defer close(result)
		response, err = client.SubmitSnapshotJob(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type SubmitSnapshotJobRequest struct {
	*requests.RpcRequest
	Input                string `position:"Query" name:"Input"`
	UserData             string `position:"Query" name:"UserData"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	Action               string `position:"Query" name:"Action"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	SnapshotConfig       string `position:"Query" name:"SnapshotConfig"`
	AccessKeyId          string `position:"Query" name:"AccessKeyId"`
	PipelineId           string `position:"Query" name:"PipelineId"`
}

type SubmitSnapshotJobResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId"`
	SnapshotJob struct {
		Id           string `json:"Id"`
		UserData     string `json:"UserData"`
		PipelineId   string `json:"PipelineId"`
		State        string `json:"State"`
		Code         string `json:"Code"`
		Count        string `json:"Count"`
		TileCount    string `json:"TileCount"`
		Message      string `json:"Message"`
		CreationTime string `json:"CreationTime"`
		Input        struct {
			Bucket   string `json:"Bucket"`
			Location string `json:"Location"`
			Object   string `json:"Object"`
			RoleArn  string `json:"RoleArn"`
		} `json:"Input"`
		SnapshotConfig struct {
			Time       string `json:"Time"`
			Interval   string `json:"Interval"`
			Num        string `json:"Num"`
			Width      string `json:"Width"`
			Height     string `json:"Height"`
			FrameType  string `json:"FrameType"`
			OutputFile struct {
				Bucket   string `json:"Bucket"`
				Location string `json:"Location"`
				Object   string `json:"Object"`
				RoleArn  string `json:"RoleArn"`
			} `json:"OutputFile"`
			TileOutputFile struct {
				Bucket   string `json:"Bucket"`
				Location string `json:"Location"`
				Object   string `json:"Object"`
				RoleArn  string `json:"RoleArn"`
			} `json:"TileOutputFile"`
			TileOut struct {
				Lines         string `json:"Lines"`
				Columns       string `json:"Columns"`
				CellWidth     string `json:"CellWidth"`
				CellHeight    string `json:"CellHeight"`
				Margin        string `json:"Margin"`
				Padding       string `json:"Padding"`
				Color         string `json:"Color"`
				IsKeepCellPic string `json:"IsKeepCellPic"`
			} `json:"TileOut"`
		} `json:"SnapshotConfig"`
		MNSMessageResult struct {
			MessageId    string `json:"MessageId"`
			ErrorMessage string `json:"ErrorMessage"`
			ErrorCode    string `json:"ErrorCode"`
		} `json:"MNSMessageResult"`
	} `json:"SnapshotJob"`
}

func CreateSubmitSnapshotJobRequest() (request *SubmitSnapshotJobRequest) {
	request = &SubmitSnapshotJobRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Mts", "2014-06-18", "SubmitSnapshotJob", "", "")
	return
}

func CreateSubmitSnapshotJobResponse() (response *SubmitSnapshotJobResponse) {
	response = &SubmitSnapshotJobResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
