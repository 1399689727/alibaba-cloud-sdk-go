package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryOrder(request *QueryOrderRequest) (response *QueryOrderResponse, err error) {
	response = CreateQueryOrderResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryOrderWithChan(request *QueryOrderRequest) (<-chan *QueryOrderResponse, <-chan error) {
	responseChan := make(chan *QueryOrderResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryOrder(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryOrderWithCallback(request *QueryOrderRequest, callback func(response *QueryOrderResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryOrderResponse
		var err error
		defer close(result)
		response, err = client.QueryOrder(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryOrderRequest struct {
	*requests.RpcRequest
	OrderID string `position:"Query" name:"OrderID"`
}

type QueryOrderResponse struct {
	*responses.BaseResponse
	RequestId     string `json:"RequestId" xml:"RequestId"`
	OrderID       string `json:"OrderID" xml:"OrderID"`
	UserID        string `json:"UserID" xml:"UserID"`
	Money         string `json:"Money" xml:"Money"`
	OrderDate     string `json:"OrderDate" xml:"OrderDate"`
	CheckFlag     bool   `json:"CheckFlag" xml:"CheckFlag"`
	CheckDate     string `json:"CheckDate" xml:"CheckDate"`
	ValidFlag     bool   `json:"ValidFlag" xml:"ValidFlag"`
	CheckType     bool   `json:"CheckType" xml:"CheckType"`
	OrderProducts []struct {
		TrackID      string `json:"TrackID" xml:"TrackID"`
		OrderID      string `json:"OrderID" xml:"OrderID"`
		SaleID       string `json:"SaleID" xml:"SaleID"`
		UserID       string `json:"UserID" xml:"UserID"`
		ClassID      string `json:"ClassID" xml:"ClassID"`
		ProductName  string `json:"ProductName" xml:"ProductName"`
		RelatedName  string `json:"RelatedName" xml:"RelatedName"`
		ActionType   string `json:"ActionType" xml:"ActionType"`
		PeriodUnit   int    `json:"PeriodUnit" xml:"PeriodUnit"`
		PeriodNum    int    `json:"PeriodNum" xml:"PeriodNum"`
		Amount       int    `json:"Amount" xml:"Amount"`
		OrderDate    string `json:"OrderDate" xml:"OrderDate"`
		CheckFlag    bool   `json:"CheckFlag" xml:"CheckFlag"`
		CheckDate    string `json:"CheckDate" xml:"CheckDate"`
		BizStatus    int    `json:"BizStatus" xml:"BizStatus"`
		UpdateDate   string `json:"UpdateDate" xml:"UpdateDate"`
		DeadDate     string `json:"DeadDate" xml:"DeadDate"`
		ValidFlag    bool   `json:"ValidFlag" xml:"ValidFlag"`
		Money        string `json:"Money" xml:"Money"`
		ParentSaleID string `json:"ParentSaleID" xml:"ParentSaleID"`
	} `json:"OrderProducts" xml:"OrderProducts"`
}

func CreateQueryOrderRequest() (request *QueryOrderRequest) {
	request = &QueryOrderRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "QueryOrder", "", "")
	return
}

func CreateQueryOrderResponse() (response *QueryOrderResponse) {
	response = &QueryOrderResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
