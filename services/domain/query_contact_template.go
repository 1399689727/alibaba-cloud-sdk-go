package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryContactTemplate(request *QueryContactTemplateRequest) (response *QueryContactTemplateResponse, err error) {
	response = CreateQueryContactTemplateResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryContactTemplateWithChan(request *QueryContactTemplateRequest) (<-chan *QueryContactTemplateResponse, <-chan error) {
	responseChan := make(chan *QueryContactTemplateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryContactTemplate(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryContactTemplateWithCallback(request *QueryContactTemplateRequest, callback func(response *QueryContactTemplateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryContactTemplateResponse
		var err error
		defer close(result)
		response, err = client.QueryContactTemplate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryContactTemplateRequest struct {
	*requests.RpcRequest
	PageSize          string `position:"Query" name:"PageSize"`
	ECompany          string `position:"Query" name:"ECompany"`
	PageNum           string `position:"Query" name:"PageNum"`
	RegType           string `position:"Query" name:"RegType"`
	AuditStatus       string `position:"Query" name:"AuditStatus"`
	ContactTemplateId string `position:"Query" name:"ContactTemplateId"`
	CCompany          string `position:"Query" name:"CCompany"`
	UserClientIp      string `position:"Query" name:"UserClientIp"`
	Lang              string `position:"Query" name:"Lang"`
	DefaultTemplate   string `position:"Query" name:"DefaultTemplate"`
}

type QueryContactTemplateResponse struct {
	*responses.BaseResponse
	RequestId        string `json:"RequestId" xml:"RequestId"`
	TotalItemNum     int    `json:"TotalItemNum" xml:"TotalItemNum"`
	CurrentPageNum   int    `json:"CurrentPageNum" xml:"CurrentPageNum"`
	TotalPageNum     int    `json:"TotalPageNum" xml:"TotalPageNum"`
	PageSize         int    `json:"PageSize" xml:"PageSize"`
	PrePage          bool   `json:"PrePage" xml:"PrePage"`
	NextPage         bool   `json:"NextPage" xml:"NextPage"`
	ContactTemplates []struct {
		ContactTemplateId int64  `json:"ContactTemplateId" xml:"ContactTemplateId"`
		CreateTime        string `json:"CreateTime" xml:"CreateTime"`
		UpdateTime        string `json:"UpdateTime" xml:"UpdateTime"`
		UserId            string `json:"UserId" xml:"UserId"`
		RegType           string `json:"RegType" xml:"RegType"`
		DefaultTemplate   bool   `json:"DefaultTemplate" xml:"DefaultTemplate"`
		AuditStatus       string `json:"AuditStatus" xml:"AuditStatus"`
		CName             string `json:"CName" xml:"CName"`
		EName             string `json:"EName" xml:"EName"`
		CCompany          string `json:"CCompany" xml:"CCompany"`
		ECompany          string `json:"ECompany" xml:"ECompany"`
		CCountry          string `json:"CCountry" xml:"CCountry"`
		CProvince         string `json:"CProvince" xml:"CProvince"`
		EProvince         string `json:"EProvince" xml:"EProvince"`
		CCity             string `json:"CCity" xml:"CCity"`
		ECity             string `json:"ECity" xml:"ECity"`
		CVenu             string `json:"CVenu" xml:"CVenu"`
		EVenu             string `json:"EVenu" xml:"EVenu"`
		Email             string `json:"Email" xml:"Email"`
		TelArea           string `json:"TelArea" xml:"TelArea"`
		PostalCode        string `json:"PostalCode" xml:"PostalCode"`
		TelMain           string `json:"TelMain" xml:"TelMain"`
		TelExt            string `json:"TelExt" xml:"TelExt"`
	} `json:"ContactTemplates" xml:"ContactTemplates"`
}

func CreateQueryContactTemplateRequest() (request *QueryContactTemplateRequest) {
	request = &QueryContactTemplateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "QueryContactTemplate", "", "")
	return
}

func CreateQueryContactTemplateResponse() (response *QueryContactTemplateResponse) {
	response = &QueryContactTemplateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
