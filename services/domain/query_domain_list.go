package domain

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryDomainList(request *QueryDomainListRequest) (response *QueryDomainListResponse, err error) {
	response = CreateQueryDomainListResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryDomainListWithChan(request *QueryDomainListRequest) (<-chan *QueryDomainListResponse, <-chan error) {
	responseChan := make(chan *QueryDomainListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryDomainList(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryDomainListWithCallback(request *QueryDomainListRequest, callback func(response *QueryDomainListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryDomainListResponse
		var err error
		defer close(result)
		response, err = client.QueryDomainList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryDomainListRequest struct {
	*requests.RpcRequest
	ProductDomainType string `position:"Query" name:"ProductDomainType"`
	PageSize          string `position:"Query" name:"PageSize"`
	PageNum           string `position:"Query" name:"PageNum"`
	RegEndDate        string `position:"Query" name:"RegEndDate"`
	UserClientIp      string `position:"Query" name:"UserClientIp"`
	Lang              string `position:"Query" name:"Lang"`
	DomainType        string `position:"Query" name:"DomainType"`
	OrderKeyType      string `position:"Query" name:"OrderKeyType"`
	RegStartDate      string `position:"Query" name:"RegStartDate"`
	OrderByType       string `position:"Query" name:"OrderByType"`
	StartDate         string `position:"Query" name:"StartDate"`
	DomainName        string `position:"Query" name:"DomainName"`
	DeadEndDate       string `position:"Query" name:"DeadEndDate"`
	GroupId           string `position:"Query" name:"GroupId"`
	EndDate           string `position:"Query" name:"EndDate"`
	QueryType         string `position:"Query" name:"QueryType"`
	DeadStartDate     string `position:"Query" name:"DeadStartDate"`
}

type QueryDomainListResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	TotalItemNum   int    `json:"TotalItemNum" xml:"TotalItemNum"`
	CurrentPageNum int    `json:"CurrentPageNum" xml:"CurrentPageNum"`
	TotalPageNum   int    `json:"TotalPageNum" xml:"TotalPageNum"`
	PageSize       int    `json:"PageSize" xml:"PageSize"`
	PrePage        bool   `json:"PrePage" xml:"PrePage"`
	NextPage       bool   `json:"NextPage" xml:"NextPage"`
	Data           []struct {
		DomainName        string `json:"DomainName" xml:"DomainName"`
		SaleId            string `json:"SaleId" xml:"SaleId"`
		DeadDate          string `json:"DeadDate" xml:"DeadDate"`
		RegDate           string `json:"RegDate" xml:"RegDate"`
		DomainAuditStatus string `json:"DomainAuditStatus" xml:"DomainAuditStatus"`
		DomainRegType     string `json:"DomainRegType" xml:"DomainRegType"`
		GroupId           string `json:"GroupId" xml:"GroupId"`
		DomainType        string `json:"DomainType" xml:"DomainType"`
		DomainStatus      string `json:"DomainStatus" xml:"DomainStatus"`
		DeadDateStatus    string `json:"DeadDateStatus" xml:"DeadDateStatus"`
		ProductId         string `json:"ProductId" xml:"ProductId"`
		DeadDateLong      int64  `json:"DeadDateLong" xml:"DeadDateLong"`
		RegDateLong       int64  `json:"RegDateLong" xml:"RegDateLong"`
		Remark            string `json:"Remark" xml:"Remark"`
		Premium           bool   `json:"Premium" xml:"Premium"`
	} `json:"Data" xml:"Data"`
}

func CreateQueryDomainListRequest() (request *QueryDomainListRequest) {
	request = &QueryDomainListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain", "2016-05-11", "QueryDomainList", "", "")
	return
}

func CreateQueryDomainListResponse() (response *QueryDomainListResponse) {
	response = &QueryDomainListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
