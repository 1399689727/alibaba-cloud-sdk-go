package dds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) Sample(request *SampleRequest) (response *SampleResponse, err error) {
	response = CreateSampleResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) SampleWithChan(request *SampleRequest) (<-chan *SampleResponse, <-chan error) {
	responseChan := make(chan *SampleResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.Sample(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) SampleWithCallback(request *SampleRequest, callback func(response *SampleResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SampleResponse
		var err error
		defer close(result)
		response, err = client.Sample(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type SampleRequest struct {
	*requests.RpcRequest
	DBInstanceId         string `position:"Query" name:"DBInstanceId"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	SecurityToken        string `position:"Query" name:"SecurityToken"`
}

type SampleResponse struct {
	*responses.BaseResponse
	RequestId        string `json:"RequestId" xml:"RequestId"`
	SecurityIps      string `json:"SecurityIps" xml:"SecurityIps"`
	SecurityIpGroups []struct {
		SecurityIpGroupName      string `json:"SecurityIpGroupName" xml:"SecurityIpGroupName"`
		SecurityIpGroupAttribute string `json:"SecurityIpGroupAttribute" xml:"SecurityIpGroupAttribute"`
		SecurityIpList           string `json:"SecurityIpList" xml:"SecurityIpList"`
	} `json:"SecurityIpGroups" xml:"SecurityIpGroups"`
}

func CreateSampleRequest() (request *SampleRequest) {
	request = &SampleRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dds", "2015-12-01", "Sample", "", "")
	return
}

func CreateSampleResponse() (response *SampleResponse) {
	response = &SampleResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
