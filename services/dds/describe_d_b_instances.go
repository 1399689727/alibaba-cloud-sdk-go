package dds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeDBInstances(request *DescribeDBInstancesRequest) (response *DescribeDBInstancesResponse, err error) {
	response = CreateDescribeDBInstancesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeDBInstancesWithChan(request *DescribeDBInstancesRequest) (<-chan *DescribeDBInstancesResponse, <-chan error) {
	responseChan := make(chan *DescribeDBInstancesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDBInstances(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeDBInstancesWithCallback(request *DescribeDBInstancesRequest, callback func(response *DescribeDBInstancesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDBInstancesResponse
		var err error
		defer close(result)
		response, err = client.DescribeDBInstances(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeDBInstancesRequest struct {
	*requests.RpcRequest
	PageSize             string `position:"Query" name:"PageSize"`
	Engine               string `position:"Query" name:"Engine"`
	PageNumber           string `position:"Query" name:"PageNumber"`
	DBInstanceType       string `position:"Query" name:"DBInstanceType"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	DBInstanceIds        string `position:"Query" name:"DBInstanceIds"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	SecurityToken        string `position:"Query" name:"SecurityToken"`
}

type DescribeDBInstancesResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId" xml:"RequestId"`
	PageNumber  int    `json:"PageNumber" xml:"PageNumber"`
	PageSize    int    `json:"PageSize" xml:"PageSize"`
	TotalCount  int    `json:"TotalCount" xml:"TotalCount"`
	DBInstances []struct {
		DBInstanceId          string `json:"DBInstanceId" xml:"DBInstanceId"`
		DBInstanceDescription string `json:"DBInstanceDescription" xml:"DBInstanceDescription"`
		RegionId              string `json:"RegionId" xml:"RegionId"`
		ZoneId                string `json:"ZoneId" xml:"ZoneId"`
		Engine                string `json:"Engine" xml:"Engine"`
		EngineVersion         string `json:"EngineVersion" xml:"EngineVersion"`
		DBInstanceClass       string `json:"DBInstanceClass" xml:"DBInstanceClass"`
		DBInstanceStorage     int    `json:"DBInstanceStorage" xml:"DBInstanceStorage"`
		DBInstanceStatus      string `json:"DBInstanceStatus" xml:"DBInstanceStatus"`
		LockMode              string `json:"LockMode" xml:"LockMode"`
		ChargeType            string `json:"ChargeType" xml:"ChargeType"`
		NetworkType           string `json:"NetworkType" xml:"NetworkType"`
		CreationTime          string `json:"CreationTime" xml:"CreationTime"`
		ExpireTime            string `json:"ExpireTime" xml:"ExpireTime"`
		DBInstanceType        string `json:"DBInstanceType" xml:"DBInstanceType"`
		LastDowngradeTime     int    `json:"LastDowngradeTime" xml:"LastDowngradeTime"`
		MongosList            []struct {
			NodeId          string `json:"NodeId" xml:"NodeId"`
			NodeDescription string `json:"NodeDescription" xml:"NodeDescription"`
			NodeClass       string `json:"NodeClass" xml:"NodeClass"`
			ConnectSting    string `json:"ConnectSting" xml:"ConnectSting"`
			Port            int    `json:"Port" xml:"Port"`
		} `json:"MongosList" xml:"MongosList"`
		ShardList []struct {
			NodeId          string `json:"NodeId" xml:"NodeId"`
			NodeDescription string `json:"NodeDescription" xml:"NodeDescription"`
			NodeClass       string `json:"NodeClass" xml:"NodeClass"`
			NodeStorage     int    `json:"NodeStorage" xml:"NodeStorage"`
		} `json:"ShardList" xml:"ShardList"`
	} `json:"DBInstances" xml:"DBInstances"`
}

func CreateDescribeDBInstancesRequest() (request *DescribeDBInstancesRequest) {
	request = &DescribeDBInstancesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dds", "2015-12-01", "DescribeDBInstances", "", "")
	return
}

func CreateDescribeDBInstancesResponse() (response *DescribeDBInstancesResponse) {
	response = &DescribeDBInstancesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
