package highddos

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeSimpleInstanceList(request *DescribeSimpleInstanceListRequest) (response *DescribeSimpleInstanceListResponse, err error) {
	response = CreateDescribeSimpleInstanceListResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeSimpleInstanceListWithChan(request *DescribeSimpleInstanceListRequest) (<-chan *DescribeSimpleInstanceListResponse, <-chan error) {
	responseChan := make(chan *DescribeSimpleInstanceListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeSimpleInstanceList(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeSimpleInstanceListWithCallback(request *DescribeSimpleInstanceListRequest, callback func(response *DescribeSimpleInstanceListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeSimpleInstanceListResponse
		var err error
		defer close(result)
		response, err = client.DescribeSimpleInstanceList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeSimpleInstanceListRequest struct {
	*requests.RpcRequest
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type DescribeSimpleInstanceListResponse struct {
	*responses.BaseResponse
	RequestId          string `json:"RequestId" xml:"RequestId"`
	Total              int    `json:"Total" xml:"Total"`
	SimpleInstanceList []struct {
		BookDate      int64  `json:"BookDate" xml:"BookDate"`
		DdosBagRemark string `json:"DdosBagRemark" xml:"DdosBagRemark"`
		ExpireDate    int64  `json:"ExpireDate" xml:"ExpireDate"`
		DdosBagId     string `json:"DdosBagId" xml:"DdosBagId"`
		BookType      int    `json:"BookType" xml:"BookType"`
		VipList       []struct {
			Bandwidth        int    `json:"Bandwidth" xml:"Bandwidth"`
			ElasticBandWidth int    `json:"ElasticBandWidth" xml:"ElasticBandWidth"`
			Line             string `json:"Line" xml:"Line"`
			Vip              string `json:"Vip" xml:"Vip"`
			Remark           string `json:"Remark" xml:"Remark"`
			SecurityStatus   string `json:"SecurityStatus" xml:"SecurityStatus"`
		} `json:"VipList" xml:"VipList"`
	} `json:"SimpleInstanceList" xml:"SimpleInstanceList"`
}

func CreateDescribeSimpleInstanceListRequest() (request *DescribeSimpleInstanceListRequest) {
	request = &DescribeSimpleInstanceListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("HighDDos", "2017-09-20", "DescribeSimpleInstanceList", "", "")
	return
}

func CreateDescribeSimpleInstanceListResponse() (response *DescribeSimpleInstanceListResponse) {
	response = &DescribeSimpleInstanceListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
