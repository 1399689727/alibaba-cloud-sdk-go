package highddos

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeDdosEvents(request *DescribeDdosEventsRequest) (response *DescribeDdosEventsResponse, err error) {
	response = CreateDescribeDdosEventsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeDdosEventsWithChan(request *DescribeDdosEventsRequest) (<-chan *DescribeDdosEventsResponse, <-chan error) {
	responseChan := make(chan *DescribeDdosEventsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDdosEvents(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeDdosEventsWithCallback(request *DescribeDdosEventsRequest, callback func(response *DescribeDdosEventsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDdosEventsResponse
		var err error
		defer close(result)
		response, err = client.DescribeDdosEvents(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeDdosEventsRequest struct {
	*requests.RpcRequest
	PageSize        string `position:"Query" name:"PageSize"`
	EndDateMillis   string `position:"Query" name:"EndDateMillis"`
	Page            string `position:"Query" name:"Page"`
	StartDateMillis string `position:"Query" name:"StartDateMillis"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
	Ip              string `position:"Query" name:"Ip"`
}

type DescribeDdosEventsResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	PageInfo  struct {
		Total       int `json:"Total" xml:"Total"`
		PageSize    int `json:"PageSize" xml:"PageSize"`
		CurrentPage int `json:"CurrentPage" xml:"CurrentPage"`
	} `json:"PageInfo" xml:"PageInfo"`
	EventList []struct {
		AttackType string `json:"AttackType" xml:"AttackType"`
		Duration   string `json:"Duration" xml:"Duration"`
		EndTime    int64  `json:"EndTime" xml:"EndTime"`
		StartTime  int64  `json:"StartTime" xml:"StartTime"`
		Result     int    `json:"Result" xml:"Result"`
	} `json:"EventList" xml:"EventList"`
}

func CreateDescribeDdosEventsRequest() (request *DescribeDdosEventsRequest) {
	request = &DescribeDdosEventsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("HighDDos", "2017-09-20", "DescribeDdosEvents", "", "")
	return
}

func CreateDescribeDdosEventsResponse() (response *DescribeDdosEventsResponse) {
	response = &DescribeDdosEventsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
