package highddos

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCcEvents(request *DescribeCcEventsRequest) (response *DescribeCcEventsResponse, err error) {
	response = CreateDescribeCcEventsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeCcEventsWithChan(request *DescribeCcEventsRequest) (<-chan *DescribeCcEventsResponse, <-chan error) {
	responseChan := make(chan *DescribeCcEventsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCcEvents(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeCcEventsWithCallback(request *DescribeCcEventsRequest, callback func(response *DescribeCcEventsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCcEventsResponse
		var err error
		defer close(result)
		response, err = client.DescribeCcEvents(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeCcEventsRequest struct {
	*requests.RpcRequest
	PageSize        string `position:"Query" name:"PageSize"`
	EndDateMillis   string `position:"Query" name:"EndDateMillis"`
	Page            string `position:"Query" name:"Page"`
	Domain          string `position:"Query" name:"Domain"`
	StartDateMillis string `position:"Query" name:"StartDateMillis"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
	InstanceId      string `position:"Query" name:"InstanceId"`
}

type DescribeCcEventsResponse struct {
	*responses.BaseResponse
	RequestId string   `json:"RequestId" xml:"RequestId"`
	EventList []string `json:"EventList" xml:"EventList"`
	PageInfo  struct {
		Total       int `json:"Total" xml:"Total"`
		PageSize    int `json:"PageSize" xml:"PageSize"`
		CurrentPage int `json:"CurrentPage" xml:"CurrentPage"`
	} `json:"PageInfo" xml:"PageInfo"`
}

func CreateDescribeCcEventsRequest() (request *DescribeCcEventsRequest) {
	request = &DescribeCcEventsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("HighDDos", "2017-09-20", "DescribeCcEvents", "", "")
	return
}

func CreateDescribeCcEventsResponse() (response *DescribeCcEventsResponse) {
	response = &DescribeCcEventsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
