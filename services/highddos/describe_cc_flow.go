package highddos

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCcFlow(request *DescribeCcFlowRequest) (response *DescribeCcFlowResponse, err error) {
	response = CreateDescribeCcFlowResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeCcFlowWithChan(request *DescribeCcFlowRequest) (<-chan *DescribeCcFlowResponse, <-chan error) {
	responseChan := make(chan *DescribeCcFlowResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCcFlow(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeCcFlowWithCallback(request *DescribeCcFlowRequest, callback func(response *DescribeCcFlowResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCcFlowResponse
		var err error
		defer close(result)
		response, err = client.DescribeCcFlow(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeCcFlowRequest struct {
	*requests.RpcRequest
	EndDateMillis   string `position:"Query" name:"EndDateMillis"`
	Domain          string `position:"Query" name:"Domain"`
	StartDateMillis string `position:"Query" name:"StartDateMillis"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
	InstanceId      string `position:"Query" name:"InstanceId"`
}

type DescribeCcFlowResponse struct {
	*responses.BaseResponse
	RequestId string   `json:"RequestId" xml:"RequestId"`
	Total     []string `json:"Total" xml:"Total"`
	Attacks   []string `json:"Attacks" xml:"Attacks"`
	TimeScope struct {
		Start    int64 `json:"Start" xml:"Start"`
		Interval int   `json:"Interval" xml:"Interval"`
	} `json:"TimeScope" xml:"TimeScope"`
}

func CreateDescribeCcFlowRequest() (request *DescribeCcFlowRequest) {
	request = &DescribeCcFlowRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("HighDDos", "2017-09-20", "DescribeCcFlow", "", "")
	return
}

func CreateDescribeCcFlowResponse() (response *DescribeCcFlowResponse) {
	response = &DescribeCcFlowResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
