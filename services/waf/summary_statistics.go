package waf

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) SummaryStatistics(request *SummaryStatisticsRequest) (response *SummaryStatisticsResponse, err error) {
	response = CreateSummaryStatisticsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) SummaryStatisticsWithChan(request *SummaryStatisticsRequest) (<-chan *SummaryStatisticsResponse, <-chan error) {
	responseChan := make(chan *SummaryStatisticsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SummaryStatistics(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) SummaryStatisticsWithCallback(request *SummaryStatisticsRequest, callback func(response *SummaryStatisticsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SummaryStatisticsResponse
		var err error
		defer close(result)
		response, err = client.SummaryStatistics(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type SummaryStatisticsRequest struct {
	*requests.RpcRequest
	Region string `position:"Query" name:"Region"`
	Days   string `position:"Query" name:"days"`
}

type SummaryStatisticsResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId" xml:"RequestId"`
	Code        string `json:"Code" xml:"Code"`
	Message     string `json:"Message" xml:"Message"`
	Success     bool   `json:"Success" xml:"Success"`
	SummaryData struct {
		WafDefendCount int `json:"WafDefendCount" xml:"WafDefendCount"`
		CcDefendCount  int `json:"CcDefendCount" xml:"CcDefendCount"`
		AclDefendCount int `json:"AclDefendCount" xml:"AclDefendCount"`
	} `json:"SummaryData" xml:"SummaryData"`
}

func CreateSummaryStatisticsRequest() (request *SummaryStatisticsRequest) {
	request = &SummaryStatisticsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("waf", "2017-09-28", "SummaryStatistics", "", "")
	return
}

func CreateSummaryStatisticsResponse() (response *SummaryStatisticsResponse) {
	response = &SummaryStatisticsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
