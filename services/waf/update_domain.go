package waf

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) UpdateDomain(request *UpdateDomainRequest) (response *UpdateDomainResponse, err error) {
	response = CreateUpdateDomainResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) UpdateDomainWithChan(request *UpdateDomainRequest) (<-chan *UpdateDomainResponse, <-chan error) {
	responseChan := make(chan *UpdateDomainResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.UpdateDomain(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) UpdateDomainWithCallback(request *UpdateDomainRequest, callback func(response *UpdateDomainResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *UpdateDomainResponse
		var err error
		defer close(result)
		response, err = client.UpdateDomain(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type UpdateDomainRequest struct {
	*requests.RpcRequest
	SourceIps string `position:"Query" name:"SourceIps"`
	Region    string `position:"Query" name:"Region"`
	Protocols string `position:"Query" name:"Protocols"`
	Domain    string `position:"Query" name:"Domain"`
	IsProxy   string `position:"Query" name:"IsProxy"`
}

type UpdateDomainResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Code      string `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	Success   bool   `json:"Success" xml:"Success"`
}

func CreateUpdateDomainRequest() (request *UpdateDomainRequest) {
	request = &UpdateDomainRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("waf", "2017-09-28", "UpdateDomain", "", "")
	return
}

func CreateUpdateDomainResponse() (response *UpdateDomainResponse) {
	response = &UpdateDomainResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
