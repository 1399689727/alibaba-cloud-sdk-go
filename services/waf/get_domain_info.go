package waf

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetDomainInfo(request *GetDomainInfoRequest) (response *GetDomainInfoResponse, err error) {
	response = CreateGetDomainInfoResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetDomainInfoWithChan(request *GetDomainInfoRequest) (<-chan *GetDomainInfoResponse, <-chan error) {
	responseChan := make(chan *GetDomainInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetDomainInfo(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetDomainInfoWithCallback(request *GetDomainInfoRequest, callback func(response *GetDomainInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetDomainInfoResponse
		var err error
		defer close(result)
		response, err = client.GetDomainInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetDomainInfoRequest struct {
	*requests.RpcRequest
	Region string `position:"Query" name:"Region"`
	Domain string `position:"Query" name:"Domain"`
}

type GetDomainInfoResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Code      string `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      struct {
		PageInfo struct {
			CurrentPage int `json:"CurrentPage" xml:"CurrentPage"`
			PageSize    int `json:"PageSize" xml:"PageSize"`
			Total       int `json:"Total" xml:"Total"`
		} `json:"PageInfo" xml:"PageInfo"`
		List []struct {
			IsNonStandardPort string   `json:"IsNonStandardPort" xml:"IsNonStandardPort"`
			IsCcActive        int      `json:"IsCcActive" xml:"IsCcActive"`
			IsWafActive       int      `json:"IsWafActive" xml:"IsWafActive"`
			IsAclActive       int      `json:"IsAclActive" xml:"IsAclActive"`
			IsAccessProduct   string   `json:"IsAccessProduct" xml:"IsAccessProduct"`
			Domain            string   `json:"Domain" xml:"Domain"`
			Cname             string   `json:"Cname" xml:"Cname"`
			Protocols         []string `json:"Protocols" xml:"Protocols"`
			SourceIps         []string `json:"SourceIps" xml:"SourceIps"`
		} `json:"List" xml:"List"`
	} `json:"Data" xml:"Data"`
}

func CreateGetDomainInfoRequest() (request *GetDomainInfoRequest) {
	request = &GetDomainInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("waf", "2017-09-28", "GetDomainInfo", "", "")
	return
}

func CreateGetDomainInfoResponse() (response *GetDomainInfoResponse) {
	response = &GetDomainInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
