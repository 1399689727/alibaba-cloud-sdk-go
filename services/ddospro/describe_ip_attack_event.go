package ddospro

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeIpAttackEvent(request *DescribeIpAttackEventRequest) (response *DescribeIpAttackEventResponse, err error) {
	response = CreateDescribeIpAttackEventResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeIpAttackEventWithChan(request *DescribeIpAttackEventRequest) (<-chan *DescribeIpAttackEventResponse, <-chan error) {
	responseChan := make(chan *DescribeIpAttackEventResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeIpAttackEvent(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeIpAttackEventWithCallback(request *DescribeIpAttackEventRequest, callback func(response *DescribeIpAttackEventResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeIpAttackEventResponse
		var err error
		defer close(result)
		response, err = client.DescribeIpAttackEvent(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeIpAttackEventRequest struct {
	*requests.RpcRequest
	Ip              string           `position:"Query" name:"Ip"`
	PageSize        requests.Integer `position:"Query" name:"PageSize"`
	Start           requests.Integer `position:"Query" name:"Start"`
	EndDateMillis   requests.Integer `position:"Query" name:"EndDateMillis"`
	StartDateMillis requests.Integer `position:"Query" name:"StartDateMillis"`
}

type DescribeIpAttackEventResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Code      string `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	Data      struct {
		PageInfo struct {
			Total int `json:"Total" xml:"Total"`
		} `json:"PageInfo" xml:"PageInfo"`
		List []struct {
			AttackType      string `json:"AttackType" xml:"AttackType"`
			Duration        string `json:"Duration" xml:"Duration"`
			StartTimeMillis int    `json:"StartTimeMillis" xml:"StartTimeMillis"`
			EndTimeMillis   int    `json:"EndTimeMillis" xml:"EndTimeMillis"`
			EventType       int    `json:"eventType" xml:"eventType"`
		} `json:"List" xml:"List"`
	} `json:"Data" xml:"Data"`
}

func CreateDescribeIpAttackEventRequest() (request *DescribeIpAttackEventRequest) {
	request = &DescribeIpAttackEventRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("DDoSPro", "2017-07-25", "DescribeIpAttackEvent", "", "")
	return
}

func CreateDescribeIpAttackEventResponse() (response *DescribeIpAttackEventResponse) {
	response = &DescribeIpAttackEventResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
