package live

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCasterComponents(request *DescribeCasterComponentsRequest) (response *DescribeCasterComponentsResponse, err error) {
	response = CreateDescribeCasterComponentsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeCasterComponentsWithChan(request *DescribeCasterComponentsRequest) (<-chan *DescribeCasterComponentsResponse, <-chan error) {
	responseChan := make(chan *DescribeCasterComponentsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCasterComponents(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeCasterComponentsWithCallback(request *DescribeCasterComponentsRequest, callback func(response *DescribeCasterComponentsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCasterComponentsResponse
		var err error
		defer close(result)
		response, err = client.DescribeCasterComponents(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeCasterComponentsRequest struct {
	*requests.RpcRequest
	ComponentId   string `position:"Query" name:"ComponentId"`
	OwnerId       string `position:"Query" name:"OwnerId"`
	CasterId      string `position:"Query" name:"CasterId"`
	SecurityToken string `position:"Query" name:"SecurityToken"`
	Version       string `position:"Query" name:"Version"`
}

type DescribeCasterComponentsResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	Total      int    `json:"Total" xml:"Total"`
	Components []struct {
		ComponentId    string `json:"ComponentId" xml:"ComponentId"`
		ComponentName  string `json:"ComponentName" xml:"ComponentName"`
		LocationId     string `json:"LocationId" xml:"LocationId"`
		ComponentType  string `json:"ComponentType" xml:"ComponentType"`
		Effect         string `json:"Effect" xml:"Effect"`
		ComponentLayer struct {
			HeightNormalized    float64  `json:"HeightNormalized" xml:"HeightNormalized"`
			WidthNormalized     float64  `json:"WidthNormalized" xml:"WidthNormalized"`
			PositionRefer       string   `json:"PositionRefer" xml:"PositionRefer"`
			PositionNormalizeds []string `json:"PositionNormalizeds" xml:"PositionNormalizeds"`
		} `json:"ComponentLayer" xml:"ComponentLayer"`
		TextLayerContent struct {
			Text                  string  `json:"Text" xml:"Text"`
			Color                 string  `json:"Color" xml:"Color"`
			FontName              string  `json:"FontName" xml:"FontName"`
			SizeNormalized        float64 `json:"SizeNormalized" xml:"SizeNormalized"`
			BorderWidthNormalized float64 `json:"BorderWidthNormalized" xml:"BorderWidthNormalized"`
			BorderColor           string  `json:"BorderColor" xml:"BorderColor"`
		} `json:"TextLayerContent" xml:"TextLayerContent"`
		ImageLayerContent struct {
			MaterialId string `json:"MaterialId" xml:"MaterialId"`
		} `json:"ImageLayerContent" xml:"ImageLayerContent"`
	} `json:"Components" xml:"Components"`
}

func CreateDescribeCasterComponentsRequest() (request *DescribeCasterComponentsRequest) {
	request = &DescribeCasterComponentsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("live", "2016-11-01", "DescribeCasterComponents", "", "")
	return
}

func CreateDescribeCasterComponentsResponse() (response *DescribeCasterComponentsResponse) {
	response = &DescribeCasterComponentsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
