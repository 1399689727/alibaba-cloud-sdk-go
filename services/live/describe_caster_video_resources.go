package live

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCasterVideoResources(request *DescribeCasterVideoResourcesRequest) (response *DescribeCasterVideoResourcesResponse, err error) {
	response = CreateDescribeCasterVideoResourcesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeCasterVideoResourcesWithChan(request *DescribeCasterVideoResourcesRequest) (<-chan *DescribeCasterVideoResourcesResponse, <-chan error) {
	responseChan := make(chan *DescribeCasterVideoResourcesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCasterVideoResources(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeCasterVideoResourcesWithCallback(request *DescribeCasterVideoResourcesRequest, callback func(response *DescribeCasterVideoResourcesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCasterVideoResourcesResponse
		var err error
		defer close(result)
		response, err = client.DescribeCasterVideoResources(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeCasterVideoResourcesRequest struct {
	*requests.RpcRequest
	OwnerId       string `position:"Query" name:"OwnerId"`
	CasterId      string `position:"Query" name:"CasterId"`
	SecurityToken string `position:"Query" name:"SecurityToken"`
	Version       string `position:"Query" name:"Version"`
}

type DescribeCasterVideoResourcesResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	Total          int    `json:"Total" xml:"Total"`
	VideoResources []struct {
		MaterialId    string `json:"MaterialId" xml:"MaterialId"`
		ResourceId    string `json:"ResourceId" xml:"ResourceId"`
		ResourceName  string `json:"ResourceName" xml:"ResourceName"`
		LocationId    string `json:"LocationId" xml:"LocationId"`
		LiveStreamUrl string `json:"LiveStreamUrl" xml:"LiveStreamUrl"`
		RepeatNum     int    `json:"RepeatNum" xml:"RepeatNum"`
	} `json:"VideoResources" xml:"VideoResources"`
}

func CreateDescribeCasterVideoResourcesRequest() (request *DescribeCasterVideoResourcesRequest) {
	request = &DescribeCasterVideoResourcesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("live", "2016-11-01", "DescribeCasterVideoResources", "", "")
	return
}

func CreateDescribeCasterVideoResourcesResponse() (response *DescribeCasterVideoResourcesResponse) {
	response = &DescribeCasterVideoResourcesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
