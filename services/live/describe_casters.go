package live

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCasters(request *DescribeCastersRequest) (response *DescribeCastersResponse, err error) {
	response = CreateDescribeCastersResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeCastersWithChan(request *DescribeCastersRequest) (<-chan *DescribeCastersResponse, <-chan error) {
	responseChan := make(chan *DescribeCastersResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCasters(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeCastersWithCallback(request *DescribeCastersRequest, callback func(response *DescribeCastersResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCastersResponse
		var err error
		defer close(result)
		response, err = client.DescribeCasters(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeCastersRequest struct {
	*requests.RpcRequest
	EndTime       string `position:"Query" name:"EndTime"`
	PageSize      string `position:"Query" name:"PageSize"`
	StartTime     string `position:"Query" name:"StartTime"`
	Status        string `position:"Query" name:"Status"`
	CasterName    string `position:"Query" name:"CasterName"`
	PageNum       string `position:"Query" name:"PageNum"`
	OwnerId       string `position:"Query" name:"OwnerId"`
	CasterId      string `position:"Query" name:"CasterId"`
	SecurityToken string `position:"Query" name:"SecurityToken"`
	Version       string `position:"Query" name:"Version"`
}

type DescribeCastersResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	Total      int    `json:"Total" xml:"Total"`
	CasterList []struct {
		Status         int    `json:"Status" xml:"Status"`
		NormType       int    `json:"NormType" xml:"NormType"`
		CasterId       string `json:"CasterId" xml:"CasterId"`
		CasterName     string `json:"CasterName" xml:"CasterName"`
		CreateTime     string `json:"CreateTime" xml:"CreateTime"`
		Period         int    `json:"Period" xml:"Period"`
		ChargeType     string `json:"ChargeType" xml:"ChargeType"`
		CasterTemplate string `json:"CasterTemplate" xml:"CasterTemplate"`
	} `json:"CasterList" xml:"CasterList"`
}

func CreateDescribeCastersRequest() (request *DescribeCastersRequest) {
	request = &DescribeCastersRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("live", "2016-11-01", "DescribeCasters", "", "")
	return
}

func CreateDescribeCastersResponse() (response *DescribeCastersResponse) {
	response = &DescribeCastersResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
