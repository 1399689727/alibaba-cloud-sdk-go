package cloudapi

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeTrafficControls(request *DescribeTrafficControlsRequest) (response *DescribeTrafficControlsResponse, err error) {
	response = CreateDescribeTrafficControlsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeTrafficControlsWithChan(request *DescribeTrafficControlsRequest) (<-chan *DescribeTrafficControlsResponse, <-chan error) {
	responseChan := make(chan *DescribeTrafficControlsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeTrafficControls(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeTrafficControlsWithCallback(request *DescribeTrafficControlsRequest, callback func(response *DescribeTrafficControlsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeTrafficControlsResponse
		var err error
		defer close(result)
		response, err = client.DescribeTrafficControls(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeTrafficControlsRequest struct {
	*requests.RpcRequest
	PageSize           string `position:"Query" name:"PageSize"`
	TrafficControlId   string `position:"Query" name:"TrafficControlId"`
	PageNumber         string `position:"Query" name:"PageNumber"`
	StageName          string `position:"Query" name:"StageName"`
	TrafficControlName string `position:"Query" name:"TrafficControlName"`
	GroupId            string `position:"Query" name:"GroupId"`
	ApiId              string `position:"Query" name:"ApiId"`
}

type DescribeTrafficControlsResponse struct {
	*responses.BaseResponse
	RequestId       string `json:"RequestId" xml:"RequestId"`
	TotalCount      int    `json:"TotalCount" xml:"TotalCount"`
	PageSize        int    `json:"PageSize" xml:"PageSize"`
	PageNumber      int    `json:"PageNumber" xml:"PageNumber"`
	TrafficControls []struct {
		TrafficControlId   string `json:"TrafficControlId" xml:"TrafficControlId"`
		TrafficControlName string `json:"TrafficControlName" xml:"TrafficControlName"`
		Description        string `json:"Description" xml:"Description"`
		TrafficControlUnit string `json:"TrafficControlUnit" xml:"TrafficControlUnit"`
		ApiDefault         int    `json:"ApiDefault" xml:"ApiDefault"`
		UserDefault        int    `json:"UserDefault" xml:"UserDefault"`
		AppDefault         int    `json:"AppDefault" xml:"AppDefault"`
		CreatedTime        string `json:"CreatedTime" xml:"CreatedTime"`
		ModifiedTime       string `json:"ModifiedTime" xml:"ModifiedTime"`
		SpecialPolicies    []struct {
			SpecialType string `json:"SpecialType" xml:"SpecialType"`
			Specials    []struct {
				SpecialKey   string `json:"SpecialKey" xml:"SpecialKey"`
				TrafficValue int    `json:"TrafficValue" xml:"TrafficValue"`
			} `json:"Specials" xml:"Specials"`
		} `json:"SpecialPolicies" xml:"SpecialPolicies"`
	} `json:"TrafficControls" xml:"TrafficControls"`
}

func CreateDescribeTrafficControlsRequest() (request *DescribeTrafficControlsRequest) {
	request = &DescribeTrafficControlsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("CloudAPI", "2016-07-14", "DescribeTrafficControls", "", "")
	return
}

func CreateDescribeTrafficControlsResponse() (response *DescribeTrafficControlsResponse) {
	response = &DescribeTrafficControlsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
