package slb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeRealtimeLogs(request *DescribeRealtimeLogsRequest) (response *DescribeRealtimeLogsResponse, err error) {
	response = CreateDescribeRealtimeLogsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeRealtimeLogsWithChan(request *DescribeRealtimeLogsRequest) (<-chan *DescribeRealtimeLogsResponse, <-chan error) {
	responseChan := make(chan *DescribeRealtimeLogsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeRealtimeLogs(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeRealtimeLogsWithCallback(request *DescribeRealtimeLogsRequest, callback func(response *DescribeRealtimeLogsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeRealtimeLogsResponse
		var err error
		defer close(result)
		response, err = client.DescribeRealtimeLogs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeRealtimeLogsRequest struct {
	*requests.RpcRequest
	Tags                 string `position:"Query" name:"Tags"`
	PageSize             string `position:"Query" name:"PageSize"`
	PageNumber           string `position:"Query" name:"PageNumber"`
	LogType              string `position:"Query" name:"LogType"`
	LogStartTime         string `position:"Query" name:"LogStartTime"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	LogEndTime           string `position:"Query" name:"LogEndTime"`
	AccessKeyId          string `position:"Query" name:"access_key_id"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	OwnerAccount         string `position:"Query" name:"OwnerAccount"`
	LoadBalancerId       string `position:"Query" name:"LoadBalancerId"`
}

type DescribeRealtimeLogsResponse struct {
	*responses.BaseResponse
	RequestId         string           `json:"RequestId" xml:"RequestId"`
	PageNumber        requests.Integer `json:"PageNumber" xml:"PageNumber"`
	PageSize          requests.Integer `json:"PageSize" xml:"PageSize"`
	TotalCount        requests.Integer `json:"TotalCount" xml:"TotalCount"`
	Progress          string           `json:"Progress" xml:"Progress"`
	LBRealTimeLogsSet struct {
		LBRealTimeLog []struct {
			LogDetail string `json:"LogDetail" xml:"LogDetail"`
		} `json:"LBRealTimeLog" xml:"LBRealTimeLog"`
	} `json:"LBRealTimeLogsSet" xml:"LBRealTimeLogsSet"`
}

func CreateDescribeRealtimeLogsRequest() (request *DescribeRealtimeLogsRequest) {
	request = &DescribeRealtimeLogsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Slb", "2014-05-15", "DescribeRealtimeLogs", "", "")
	return
}

func CreateDescribeRealtimeLogsResponse() (response *DescribeRealtimeLogsResponse) {
	response = &DescribeRealtimeLogsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
