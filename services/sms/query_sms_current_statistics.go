package sms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QuerySmsCurrentStatistics(request *QuerySmsCurrentStatisticsRequest) (response *QuerySmsCurrentStatisticsResponse, err error) {
	response = CreateQuerySmsCurrentStatisticsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QuerySmsCurrentStatisticsWithChan(request *QuerySmsCurrentStatisticsRequest) (<-chan *QuerySmsCurrentStatisticsResponse, <-chan error) {
	responseChan := make(chan *QuerySmsCurrentStatisticsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QuerySmsCurrentStatistics(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QuerySmsCurrentStatisticsWithCallback(request *QuerySmsCurrentStatisticsRequest, callback func(response *QuerySmsCurrentStatisticsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QuerySmsCurrentStatisticsResponse
		var err error
		defer close(result)
		response, err = client.QuerySmsCurrentStatistics(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QuerySmsCurrentStatisticsRequest struct {
	*requests.RpcRequest
	TemplateCode         string `position:"Query" name:"TemplateCode"`
	PageSize             string `position:"Query" name:"PageSize"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	PageNo               string `position:"Query" name:"PageNo"`
	Version              string `position:"Query" name:"Version"`
	StartDateStr         string `position:"Query" name:"StartDateStr"`
	EndDateStr           string `position:"Query" name:"EndDateStr"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	TagCode              string `position:"Query" name:"TagCode"`
	TemplateType         string `position:"Query" name:"TemplateType"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
}

type QuerySmsCurrentStatisticsResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	PageNo    int    `json:"pageNo" xml:"pageNo"`
	Total     int    `json:"total" xml:"total"`
	PageSize  int    `json:"pageSize" xml:"pageSize"`
	Data      []struct {
		DayMark   string `json:"dayMark" xml:"dayMark"`
		DySmSucc  string `json:"dySmSucc" xml:"dySmSucc"`
		DyTelSucc string `json:"dyTelSucc" xml:"dyTelSucc"`
		SmTotal   string `json:"smTotal" xml:"smTotal"`
		SmSucc    string `json:"smSucc" xml:"smSucc"`
		SmFail    string `json:"smFail" xml:"smFail"`
	} `json:"data" xml:"data"`
}

func CreateQuerySmsCurrentStatisticsRequest() (request *QuerySmsCurrentStatisticsRequest) {
	request = &QuerySmsCurrentStatisticsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Sms", "2017-02-28", "QuerySmsCurrentStatistics", "", "")
	return
}

func CreateQuerySmsCurrentStatisticsResponse() (response *QuerySmsCurrentStatisticsResponse) {
	response = &QuerySmsCurrentStatisticsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
