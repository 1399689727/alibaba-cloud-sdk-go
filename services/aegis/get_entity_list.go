package aegis

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetEntityList(request *GetEntityListRequest) (response *GetEntityListResponse, err error) {
	response = CreateGetEntityListResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetEntityListWithChan(request *GetEntityListRequest) (<-chan *GetEntityListResponse, <-chan error) {
	responseChan := make(chan *GetEntityListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetEntityList(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetEntityListWithCallback(request *GetEntityListRequest, callback func(response *GetEntityListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetEntityListResponse
		var err error
		defer close(result)
		response, err = client.GetEntityList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetEntityListRequest struct {
	*requests.RpcRequest
	PageSize    string `position:"Query" name:"PageSize"`
	RegionNo    string `position:"Query" name:"RegionNo"`
	Remark      string `position:"Query" name:"Remark"`
	CurrentPage string `position:"Query" name:"CurrentPage"`
	GroupId     string `position:"Query" name:"GroupId"`
	EventType   string `position:"Query" name:"EventType"`
}

type GetEntityListResponse struct {
	*responses.BaseResponse
	RequestId string `json:"requestId" xml:"requestId"`
	Code      string `json:"Code" xml:"Code"`
	Success   bool   `json:"Success" xml:"Success"`
	Message   string `json:"Message" xml:"Message"`
	Data      struct {
		PageInfo struct {
			CurrentPage int `json:"CurrentPage" xml:"CurrentPage"`
			PageSize    int `json:"PageSize" xml:"PageSize"`
			TotalCount  int `json:"TotalCount" xml:"TotalCount"`
			Count       int `json:"Count" xml:"Count"`
		} `json:"PageInfo" xml:"PageInfo"`
		List []struct {
			Uuid         string `json:"Uuid" xml:"Uuid"`
			GroupId      int64  `json:"GroupId" xml:"GroupId"`
			Ip           string `json:"Ip" xml:"Ip"`
			InstanceName string `json:"InstanceName" xml:"InstanceName"`
			InstanceId   string `json:"InstanceId" xml:"InstanceId"`
			Region       string `json:"Region" xml:"Region"`
			Os           string `json:"Os" xml:"Os"`
			Flag         string `json:"Flag" xml:"Flag"`
			BuyVersion   string `json:"BuyVersion" xml:"BuyVersion"`
			AegisOnline  bool   `json:"AegisOnline" xml:"AegisOnline"`
			AegisVersion string `json:"aegisVersion" xml:"aegisVersion"`
		} `json:"List" xml:"List"`
	} `json:"Data" xml:"Data"`
}

func CreateGetEntityListRequest() (request *GetEntityListRequest) {
	request = &GetEntityListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("aegis", "2016-11-11", "GetEntityList", "", "")
	return
}

func CreateGetEntityListResponse() (response *GetEntityListResponse) {
	response = &GetEntityListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
