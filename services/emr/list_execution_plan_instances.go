package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListExecutionPlanInstances(request *ListExecutionPlanInstancesRequest) (response *ListExecutionPlanInstancesResponse, err error) {
	response = CreateListExecutionPlanInstancesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListExecutionPlanInstancesWithChan(request *ListExecutionPlanInstancesRequest) (<-chan *ListExecutionPlanInstancesResponse, <-chan error) {
	responseChan := make(chan *ListExecutionPlanInstancesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListExecutionPlanInstances(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListExecutionPlanInstancesWithCallback(request *ListExecutionPlanInstancesRequest, callback func(response *ListExecutionPlanInstancesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListExecutionPlanInstancesResponse
		var err error
		defer close(result)
		response, err = client.ListExecutionPlanInstances(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListExecutionPlanInstancesRequest struct {
	*requests.RpcRequest
	PageSize            string    `position:"Query" name:"PageSize"`
	PageNumber          string    `position:"Query" name:"PageNumber"`
	IsDesc              string    `position:"Query" name:"IsDesc"`
	ResourceOwnerId     string    `position:"Query" name:"ResourceOwnerId"`
	OnlyLastInstance    string    `position:"Query" name:"OnlyLastInstance"`
	StatusList          *[]string `position:"Query" name:"StatusList"  type:"Repeated"`
	ExecutionPlanIdList *[]string `position:"Query" name:"ExecutionPlanIdList"  type:"Repeated"`
}

type ListExecutionPlanInstancesResponse struct {
	*responses.BaseResponse
	RequestId              string `json:"RequestId" xml:"RequestId"`
	TotalCount             int    `json:"TotalCount" xml:"TotalCount"`
	PageNumber             int    `json:"PageNumber" xml:"PageNumber"`
	PageSize               int    `json:"PageSize" xml:"PageSize"`
	ExecutionPlanInstances []struct {
		Id                string `json:"Id" xml:"Id"`
		ExecutionPlanId   string `json:"ExecutionPlanId" xml:"ExecutionPlanId"`
		ExecutionPlanName string `json:"ExecutionPlanName" xml:"ExecutionPlanName"`
		StartTime         int64  `json:"StartTime" xml:"StartTime"`
		RunTime           int    `json:"RunTime" xml:"RunTime"`
		ClusterId         string `json:"ClusterId" xml:"ClusterId"`
		ClusterName       string `json:"ClusterName" xml:"ClusterName"`
		ClusterType       string `json:"ClusterType" xml:"ClusterType"`
		Status            string `json:"Status" xml:"Status"`
		LogEnable         bool   `json:"LogEnable" xml:"LogEnable"`
		LogPath           string `json:"LogPath" xml:"LogPath"`
	} `json:"ExecutionPlanInstances" xml:"ExecutionPlanInstances"`
}

func CreateListExecutionPlanInstancesRequest() (request *ListExecutionPlanInstancesRequest) {
	request = &ListExecutionPlanInstancesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListExecutionPlanInstances", "", "")
	return
}

func CreateListExecutionPlanInstancesResponse() (response *ListExecutionPlanInstancesResponse) {
	response = &ListExecutionPlanInstancesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
