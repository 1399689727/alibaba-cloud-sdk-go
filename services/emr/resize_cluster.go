package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ResizeCluster(request *ResizeClusterRequest) (response *ResizeClusterResponse, err error) {
	response = CreateResizeClusterResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ResizeClusterWithChan(request *ResizeClusterRequest) (<-chan *ResizeClusterResponse, <-chan error) {
	responseChan := make(chan *ResizeClusterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ResizeCluster(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ResizeClusterWithCallback(request *ResizeClusterRequest, callback func(response *ResizeClusterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ResizeClusterResponse
		var err error
		defer close(result)
		response, err = client.ResizeCluster(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ResizeClusterRequest struct {
	*requests.RpcRequest
	NewTaskInstances   string `position:"Query" name:"NewTaskInstances"`
	CoreInstanceType   string `position:"Query" name:"CoreInstanceType"`
	NewMasterInstances string `position:"Query" name:"NewMasterInstances"`
	ClusterId          string `position:"Query" name:"ClusterId"`
	NewCoreInstances   string `position:"Query" name:"NewCoreInstances"`
	AutoRenew          string `position:"Query" name:"AutoRenew"`
	Period             string `position:"Query" name:"Period"`
	ChargeType         string `position:"Query" name:"ChargeType"`
}

type ResizeClusterResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId" xml:"RequestId"`
	ClusterId   string `json:"ClusterId" xml:"ClusterId"`
	EmrOrderId  string `json:"EmrOrderId" xml:"EmrOrderId"`
	CoreOrderId string `json:"CoreOrderId" xml:"CoreOrderId"`
}

func CreateResizeClusterRequest() (request *ResizeClusterRequest) {
	request = &ResizeClusterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ResizeCluster", "", "")
	return
}

func CreateResizeClusterResponse() (response *ResizeClusterResponse) {
	response = &ResizeClusterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
