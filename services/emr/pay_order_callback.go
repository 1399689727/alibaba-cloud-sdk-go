package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) PayOrderCallback(request *PayOrderCallbackRequest) (response *PayOrderCallbackResponse, err error) {
	response = CreatePayOrderCallbackResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) PayOrderCallbackWithChan(request *PayOrderCallbackRequest) (<-chan *PayOrderCallbackResponse, <-chan error) {
	responseChan := make(chan *PayOrderCallbackResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PayOrderCallback(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) PayOrderCallbackWithCallback(request *PayOrderCallbackRequest, callback func(response *PayOrderCallbackResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PayOrderCallbackResponse
		var err error
		defer close(result)
		response, err = client.PayOrderCallback(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type PayOrderCallbackRequest struct {
	*requests.RpcRequest
	Data            string `position:"Query" name:"data"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type PayOrderCallbackResponse struct {
	*responses.BaseResponse
	RequestId string `json:"requestId" xml:"requestId"`
	Success   bool   `json:"success" xml:"success"`
	Code      string `json:"code" xml:"code"`
	Message   string `json:"message" xml:"message"`
}

func CreatePayOrderCallbackRequest() (request *PayOrderCallbackRequest) {
	request = &PayOrderCallbackRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "PayOrderCallback", "", "")
	return
}

func CreatePayOrderCallbackResponse() (response *PayOrderCallbackResponse) {
	response = &PayOrderCallbackResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
