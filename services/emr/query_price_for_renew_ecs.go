package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryPriceForRenewEcs(request *QueryPriceForRenewEcsRequest) (response *QueryPriceForRenewEcsResponse, err error) {
	response = CreateQueryPriceForRenewEcsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryPriceForRenewEcsWithChan(request *QueryPriceForRenewEcsRequest) (<-chan *QueryPriceForRenewEcsResponse, <-chan error) {
	responseChan := make(chan *QueryPriceForRenewEcsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryPriceForRenewEcs(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryPriceForRenewEcsWithCallback(request *QueryPriceForRenewEcsRequest, callback func(response *QueryPriceForRenewEcsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryPriceForRenewEcsResponse
		var err error
		defer close(result)
		response, err = client.QueryPriceForRenewEcs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryPriceForRenewEcsRequest struct {
	*requests.RpcRequest
	EcsPeriod       string `position:"Query" name:"EcsPeriod"`
	EmrPeriod       string `position:"Query" name:"EmrPeriod"`
	EcsId           string `position:"Query" name:"EcsId"`
	ClusterId       string `position:"Query" name:"ClusterId"`
	EcsIdList       string `position:"Query" name:"EcsIdList"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type QueryPriceForRenewEcsResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	EcsId      string `json:"EcsId" xml:"EcsId"`
	EmrPrice   string `json:"EmrPrice" xml:"EmrPrice"`
	EcsPrice   string `json:"EcsPrice" xml:"EcsPrice"`
	EmrPriceDO struct {
		OriginalPrice string `json:"OriginalPrice" xml:"OriginalPrice"`
		DiscountPrice string `json:"DiscountPrice" xml:"DiscountPrice"`
		TradePrice    string `json:"TradePrice" xml:"TradePrice"`
		TaxPrice      string `json:"TaxPrice" xml:"TaxPrice"`
		Currency      string `json:"Currency" xml:"Currency"`
	} `json:"EmrPriceDO" xml:"EmrPriceDO"`
	EcsPriceDO struct {
		OriginalPrice string `json:"OriginalPrice" xml:"OriginalPrice"`
		DiscountPrice string `json:"DiscountPrice" xml:"DiscountPrice"`
		TradePrice    string `json:"TradePrice" xml:"TradePrice"`
		TaxPrice      string `json:"TaxPrice" xml:"TaxPrice"`
		Currency      string `json:"Currency" xml:"Currency"`
	} `json:"EcsPriceDO" xml:"EcsPriceDO"`
}

func CreateQueryPriceForRenewEcsRequest() (request *QueryPriceForRenewEcsRequest) {
	request = &QueryPriceForRenewEcsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "QueryPriceForRenewEcs", "", "")
	return
}

func CreateQueryPriceForRenewEcsResponse() (response *QueryPriceForRenewEcsResponse) {
	response = &QueryPriceForRenewEcsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
