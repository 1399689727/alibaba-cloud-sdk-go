package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) RetryExecutionPlan(request *RetryExecutionPlanRequest) (response *RetryExecutionPlanResponse, err error) {
	response = CreateRetryExecutionPlanResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) RetryExecutionPlanWithChan(request *RetryExecutionPlanRequest) (<-chan *RetryExecutionPlanResponse, <-chan error) {
	responseChan := make(chan *RetryExecutionPlanResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RetryExecutionPlan(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) RetryExecutionPlanWithCallback(request *RetryExecutionPlanRequest, callback func(response *RetryExecutionPlanResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RetryExecutionPlanResponse
		var err error
		defer close(result)
		response, err = client.RetryExecutionPlan(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type RetryExecutionPlanRequest struct {
	*requests.RpcRequest
	Id                       string `position:"Query" name:"Id"`
	ExecutionPlanWorkNodeIds string `position:"Query" name:"ExecutionPlanWorkNodeIds"`
	ResourceOwnerId          string `position:"Query" name:"ResourceOwnerId"`
}

type RetryExecutionPlanResponse struct {
	*responses.BaseResponse
	RequestId               string `json:"RequestId" xml:"RequestId"`
	ExecutionPlanInstanceId string `json:"ExecutionPlanInstanceId" xml:"ExecutionPlanInstanceId"`
}

func CreateRetryExecutionPlanRequest() (request *RetryExecutionPlanRequest) {
	request = &RetryExecutionPlanRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "RetryExecutionPlan", "", "")
	return
}

func CreateRetryExecutionPlanResponse() (response *RetryExecutionPlanResponse) {
	response = &RetryExecutionPlanResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
