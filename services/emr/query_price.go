package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryPrice(request *QueryPriceRequest) (response *QueryPriceResponse, err error) {
	response = CreateQueryPriceResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryPriceWithChan(request *QueryPriceRequest) (<-chan *QueryPriceResponse, <-chan error) {
	responseChan := make(chan *QueryPriceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryPrice(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryPriceWithCallback(request *QueryPriceRequest, callback func(response *QueryPriceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryPriceResponse
		var err error
		defer close(result)
		response, err = client.QueryPrice(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryPriceRequest struct {
	*requests.RpcRequest
	TaskDiskType           string                 `position:"Query" name:"TaskDiskType"`
	CoreInstanceQuantity   string                 `position:"Query" name:"CoreInstanceQuantity"`
	HostGroup              *[]QueryPriceHostGroup `position:"Query" name:"HostGroup"  type:"Repeated"`
	MasterInstanceQuantity string                 `position:"Query" name:"MasterInstanceQuantity"`
	MasterInstanceType     string                 `position:"Query" name:"MasterInstanceType"`
	CoreInstanceType       string                 `position:"Query" name:"CoreInstanceType"`
	CoreDiskQuantity       string                 `position:"Query" name:"CoreDiskQuantity"`
	ZoneId                 string                 `position:"Query" name:"ZoneId"`
	TaskInstanceQuantity   string                 `position:"Query" name:"TaskInstanceQuantity"`
	Period                 string                 `position:"Query" name:"Period"`
	IoOptimized            string                 `position:"Query" name:"IoOptimized"`
	TaskInstanceType       string                 `position:"Query" name:"TaskInstanceType"`
	Duration               string                 `position:"Query" name:"Duration"`
	MasterDiskType         string                 `position:"Query" name:"MasterDiskType"`
	NetType                string                 `position:"Query" name:"NetType"`
	MasterDiskQuantity     string                 `position:"Query" name:"MasterDiskQuantity"`
	CoreDiskType           string                 `position:"Query" name:"CoreDiskType"`
	ResourceOwnerId        string                 `position:"Query" name:"ResourceOwnerId"`
	ChargeType             string                 `position:"Query" name:"ChargeType"`
	TaskDiskQuantity       string                 `position:"Query" name:"TaskDiskQuantity"`
}

type QueryPriceHostGroup struct {
	HostGroupId     string `name:"HostGroupId"`
	HostGroupName   string `name:"HostGroupName"`
	HostGroupType   string `name:"HostGroupType"`
	ClusterId       string `name:"ClusterId"`
	Comment         string `name:"Comment"`
	CreateType      string `name:"CreateType"`
	ChargeType      string `name:"ChargeType"`
	Period          string `name:"Period"`
	NodeCount       string `name:"NodeCount"`
	InstanceType    string `name:"InstanceType"`
	DiskType        string `name:"DiskType"`
	DiskCapacity    string `name:"DiskCapacity"`
	DiskCount       string `name:"DiskCount"`
	SysDiskCapacity string `name:"SysDiskCapacity"`
	AutoRenew       string `name:"AutoRenew"`
	VSwitchId       string `name:"VSwitchId"`
}

type QueryPriceResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	EmrPrice   string `json:"EmrPrice" xml:"EmrPrice"`
	EcsPrice   string `json:"EcsPrice" xml:"EcsPrice"`
	EmrPriceDO struct {
		OriginalPrice string `json:"OriginalPrice" xml:"OriginalPrice"`
		DiscountPrice string `json:"DiscountPrice" xml:"DiscountPrice"`
		TradePrice    string `json:"TradePrice" xml:"TradePrice"`
		TaxPrice      string `json:"TaxPrice" xml:"TaxPrice"`
		Currency      string `json:"Currency" xml:"Currency"`
	} `json:"EmrPriceDO" xml:"EmrPriceDO"`
	EcsPriceDO struct {
		OriginalPrice string `json:"OriginalPrice" xml:"OriginalPrice"`
		DiscountPrice string `json:"DiscountPrice" xml:"DiscountPrice"`
		TradePrice    string `json:"TradePrice" xml:"TradePrice"`
		TaxPrice      string `json:"TaxPrice" xml:"TaxPrice"`
		Currency      string `json:"Currency" xml:"Currency"`
	} `json:"EcsPriceDO" xml:"EcsPriceDO"`
}

func CreateQueryPriceRequest() (request *QueryPriceRequest) {
	request = &QueryPriceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "QueryPrice", "", "")
	return
}

func CreateQueryPriceResponse() (response *QueryPriceResponse) {
	response = &QueryPriceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
