package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryAlarmHistory(request *QueryAlarmHistoryRequest) (response *QueryAlarmHistoryResponse, err error) {
	response = CreateQueryAlarmHistoryResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryAlarmHistoryWithChan(request *QueryAlarmHistoryRequest) (<-chan *QueryAlarmHistoryResponse, <-chan error) {
	responseChan := make(chan *QueryAlarmHistoryResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryAlarmHistory(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryAlarmHistoryWithCallback(request *QueryAlarmHistoryRequest, callback func(response *QueryAlarmHistoryResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryAlarmHistoryResponse
		var err error
		defer close(result)
		response, err = client.QueryAlarmHistory(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryAlarmHistoryRequest struct {
	*requests.RpcRequest
	StartTimeStamp  string `position:"Query" name:"StartTimeStamp"`
	ClusterId       string `position:"Query" name:"ClusterId"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
	EndTimeStamp    string `position:"Query" name:"EndTimeStamp"`
}

type QueryAlarmHistoryResponse struct {
	*responses.BaseResponse
	RequestId        string `json:"RequestId" xml:"RequestId"`
	AlarmHistoryList []struct {
		ClusterId     string `json:"ClusterId" xml:"ClusterId"`
		Role          string `json:"Role" xml:"Role"`
		InstanceId    string `json:"InstanceId" xml:"InstanceId"`
		Name          string `json:"Name" xml:"Name"`
		MetricName    string `json:"MetricName" xml:"MetricName"`
		AlarmTime     int64  `json:"AlarmTime" xml:"AlarmTime"`
		LastTime      int64  `json:"LastTime" xml:"LastTime"`
		State         string `json:"State" xml:"State"`
		Status        int    `json:"Status" xml:"Status"`
		ContactGroups string `json:"ContactGroups" xml:"ContactGroups"`
	} `json:"AlarmHistoryList" xml:"AlarmHistoryList"`
}

func CreateQueryAlarmHistoryRequest() (request *QueryAlarmHistoryRequest) {
	request = &QueryAlarmHistoryRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "QueryAlarmHistory", "", "")
	return
}

func CreateQueryAlarmHistoryResponse() (response *QueryAlarmHistoryResponse) {
	response = &QueryAlarmHistoryResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
