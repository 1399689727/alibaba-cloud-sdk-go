package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeClusterScript(request *DescribeClusterScriptRequest) (response *DescribeClusterScriptResponse, err error) {
	response = CreateDescribeClusterScriptResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeClusterScriptWithChan(request *DescribeClusterScriptRequest) (<-chan *DescribeClusterScriptResponse, <-chan error) {
	responseChan := make(chan *DescribeClusterScriptResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeClusterScript(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeClusterScriptWithCallback(request *DescribeClusterScriptRequest, callback func(response *DescribeClusterScriptResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeClusterScriptResponse
		var err error
		defer close(result)
		response, err = client.DescribeClusterScript(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeClusterScriptRequest struct {
	*requests.RpcRequest
	Id              string `position:"Query" name:"Id"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type DescribeClusterScriptResponse struct {
	*responses.BaseResponse
	RequestId           string `json:"RequestId" xml:"RequestId"`
	ScriptNodeInstances []struct {
		NodeId    string `json:"NodeId" xml:"NodeId"`
		NodeIp    string `json:"NodeIp" xml:"NodeIp"`
		StartTime int64  `json:"StartTime" xml:"StartTime"`
		EndTime   int64  `json:"EndTime" xml:"EndTime"`
		Status    string `json:"Status" xml:"Status"`
	} `json:"ScriptNodeInstances" xml:"ScriptNodeInstances"`
}

func CreateDescribeClusterScriptRequest() (request *DescribeClusterScriptRequest) {
	request = &DescribeClusterScriptRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "DescribeClusterScript", "", "")
	return
}

func CreateDescribeClusterScriptResponse() (response *DescribeClusterScriptResponse) {
	response = &DescribeClusterScriptResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
