package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListAvailableConfig(request *ListAvailableConfigRequest) (response *ListAvailableConfigResponse, err error) {
	response = CreateListAvailableConfigResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListAvailableConfigWithChan(request *ListAvailableConfigRequest) (<-chan *ListAvailableConfigResponse, <-chan error) {
	responseChan := make(chan *ListAvailableConfigResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListAvailableConfig(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListAvailableConfigWithCallback(request *ListAvailableConfigRequest, callback func(response *ListAvailableConfigResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListAvailableConfigResponse
		var err error
		defer close(result)
		response, err = client.ListAvailableConfig(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListAvailableConfigRequest struct {
	*requests.RpcRequest
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type ListAvailableConfigResponse struct {
	*responses.BaseResponse
	RequestId          string `json:"RequestId" xml:"RequestId"`
	SecurityGroupTypes []struct {
		Name  string `json:"Name" xml:"Name"`
		State string `json:"State" xml:"State"`
		Id    string `json:"Id" xml:"Id"`
	} `json:"SecurityGroupTypes" xml:"SecurityGroupTypes"`
	InstanceTypes []struct {
		Classify               string `json:"Classify" xml:"Classify"`
		Type                   string `json:"Type" xml:"Type"`
		CpuCore                int    `json:"CpuCore" xml:"CpuCore"`
		MemSize                int    `json:"MemSize" xml:"MemSize"`
		HasCloudDisk           bool   `json:"HasCloudDisk" xml:"HasCloudDisk"`
		HasEfficiencyCloudDisk bool   `json:"HasEfficiencyCloudDisk" xml:"HasEfficiencyCloudDisk"`
		HasSSDCloudDisk        bool   `json:"HasSSDCloudDisk" xml:"HasSSDCloudDisk"`
	} `json:"InstanceTypes" xml:"InstanceTypes"`
	EmrVerTypes []struct {
		Name       string `json:"Name" xml:"Name"`
		EcmStack   bool   `json:"EcmStack" xml:"EcmStack"`
		SubModules []struct {
			Name         string `json:"Name" xml:"Name"`
			RequiredList []struct {
				DisplayName string `json:"DisplayName" xml:"DisplayName"`
				Name        string `json:"Name" xml:"Name"`
				OnlyDisplay bool   `json:"OnlyDisplay" xml:"OnlyDisplay"`
				StartTpe    int    `json:"StartTpe" xml:"StartTpe"`
				Version     string `json:"Version" xml:"Version"`
			} `json:"RequiredList" xml:"RequiredList"`
			OptionalList []struct {
				DisplayName string `json:"DisplayName" xml:"DisplayName"`
				Name        string `json:"Name" xml:"Name"`
				OnlyDisplay bool   `json:"OnlyDisplay" xml:"OnlyDisplay"`
				StartTpe    int    `json:"StartTpe" xml:"StartTpe"`
				Version     string `json:"Version" xml:"Version"`
			} `json:"OptionalList" xml:"OptionalList"`
		} `json:"SubModules" xml:"SubModules"`
	} `json:"EmrVerTypes" xml:"EmrVerTypes"`
	ZoneTypes []struct {
		Name                          string   `json:"Name" xml:"Name"`
		Id                            string   `json:"Id" xml:"Id"`
		AvailableResourceCreationList []string `json:"AvailableResourceCreationList" xml:"AvailableResourceCreationList"`
		AvailableDiskCategoryList     []string `json:"AvailableDiskCategoryList" xml:"AvailableDiskCategoryList"`
		AvailableResources            []struct {
			IoOptimized            bool     `json:"IoOptimized" xml:"IoOptimized"`
			SystemDiskCategories   []string `json:"SystemDiskCategories" xml:"SystemDiskCategories"`
			DataDiskCategories     []string `json:"DataDiskCategories" xml:"DataDiskCategories"`
			NetworkTypes           []string `json:"NetworkTypes" xml:"NetworkTypes"`
			SupportedInstanceTypes []string `json:"SupportedInstanceTypes" xml:"SupportedInstanceTypes"`
			InstanceTypeFamilies   []string `json:"InstanceTypeFamilies" xml:"InstanceTypeFamilies"`
			InstanceGenerations    []string `json:"InstanceGenerations" xml:"InstanceGenerations"`
		} `json:"AvailableResources" xml:"AvailableResources"`
	} `json:"ZoneTypes" xml:"ZoneTypes"`
	Vpcs []struct {
		Id        string `json:"Id" xml:"Id"`
		VpcName   string `json:"VpcName" xml:"VpcName"`
		CidrBlock string `json:"CidrBlock" xml:"CidrBlock"`
		VSwitchs  []struct {
			Id          string `json:"id" xml:"id"`
			VswitchName string `json:"VswitchName" xml:"VswitchName"`
			CidrBlock   string `json:"CidrBlock" xml:"CidrBlock"`
			ZoneId      string `json:"ZoneId" xml:"ZoneId"`
		} `json:"VSwitchs" xml:"VSwitchs"`
		SecurityGroups []struct {
			Name string `json:"Name" xml:"Name"`
			Id   string `json:"Id" xml:"Id"`
		} `json:"SecurityGroups" xml:"SecurityGroups"`
	} `json:"Vpcs" xml:"Vpcs"`
	EmrSupportedInstanceTypeList []struct {
		ClusterType             string `json:"ClusterType" xml:"ClusterType"`
		NodeTypeSupportInfoList []struct {
			ClusterNodeType         string   `json:"ClusterNodeType" xml:"ClusterNodeType"`
			SupportInstanceTypeList []string `json:"SupportInstanceTypeList" xml:"SupportInstanceTypeList"`
		} `json:"NodeTypeSupportInfoList" xml:"NodeTypeSupportInfoList"`
	} `json:"EmrSupportedInstanceTypeList" xml:"EmrSupportedInstanceTypeList"`
}

func CreateListAvailableConfigRequest() (request *ListAvailableConfigRequest) {
	request = &ListAvailableConfigRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListAvailableConfig", "", "")
	return
}

func CreateListAvailableConfigResponse() (response *ListAvailableConfigResponse) {
	response = &ListAvailableConfigResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
