package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryMetricData(request *QueryMetricDataRequest) (response *QueryMetricDataResponse, err error) {
	response = CreateQueryMetricDataResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryMetricDataWithChan(request *QueryMetricDataRequest) (<-chan *QueryMetricDataResponse, <-chan error) {
	responseChan := make(chan *QueryMetricDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryMetricData(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryMetricDataWithCallback(request *QueryMetricDataRequest, callback func(response *QueryMetricDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryMetricDataResponse
		var err error
		defer close(result)
		response, err = client.QueryMetricData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryMetricDataRequest struct {
	*requests.RpcRequest
	MetricName      string `position:"Query" name:"MetricName"`
	StartTimeStamp  string `position:"Query" name:"StartTimeStamp"`
	ClusterId       string `position:"Query" name:"ClusterId"`
	HostRole        string `position:"Query" name:"HostRole"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
	Period          string `position:"Query" name:"Period"`
	EndTimeStamp    string `position:"Query" name:"EndTimeStamp"`
}

type QueryMetricDataResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	Datapoints []struct {
		Role      string  `json:"Role" xml:"Role"`
		Maximum   float64 `json:"Maximum" xml:"Maximum"`
		Minimum   float64 `json:"Minimum" xml:"Minimum"`
		Average   float64 `json:"Average" xml:"Average"`
		Timestamp int64   `json:"Timestamp" xml:"Timestamp"`
	} `json:"Datapoints" xml:"Datapoints"`
}

func CreateQueryMetricDataRequest() (request *QueryMetricDataRequest) {
	request = &QueryMetricDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "QueryMetricData", "", "")
	return
}

func CreateQueryMetricDataResponse() (response *QueryMetricDataResponse) {
	response = &QueryMetricDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
