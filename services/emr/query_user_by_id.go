package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryUserById(request *QueryUserByIdRequest) (response *QueryUserByIdResponse, err error) {
	response = CreateQueryUserByIdResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryUserByIdWithChan(request *QueryUserByIdRequest) (<-chan *QueryUserByIdResponse, <-chan error) {
	responseChan := make(chan *QueryUserByIdResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryUserById(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryUserByIdWithCallback(request *QueryUserByIdRequest, callback func(response *QueryUserByIdResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryUserByIdResponse
		var err error
		defer close(result)
		response, err = client.QueryUserById(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryUserByIdRequest struct {
	*requests.RpcRequest
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type QueryUserByIdResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	User      struct {
		Id              string `json:"Id" xml:"Id"`
		AliyunId        string `json:"AliyunId" xml:"AliyunId"`
		AliyunOmtId     string `json:"AliyunOmtId" xml:"AliyunOmtId"`
		UserId          string `json:"UserId" xml:"UserId"`
		Email           string `json:"Email" xml:"Email"`
		Status          string `json:"Status" xml:"Status"`
		DefaultSecGroup string `json:"DefaultSecGroup" xml:"DefaultSecGroup"`
		RegionId        string `json:"RegionId" xml:"RegionId"`
		ChannelId       string `json:"ChannelId" xml:"ChannelId"`
	} `json:"User" xml:"User"`
}

func CreateQueryUserByIdRequest() (request *QueryUserByIdRequest) {
	request = &QueryUserByIdRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "QueryUserById", "", "")
	return
}

func CreateQueryUserByIdResponse() (response *QueryUserByIdResponse) {
	response = &QueryUserByIdResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
