package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ModifyExecutionPlanClusterInfo(request *ModifyExecutionPlanClusterInfoRequest) (response *ModifyExecutionPlanClusterInfoResponse, err error) {
	response = CreateModifyExecutionPlanClusterInfoResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ModifyExecutionPlanClusterInfoWithChan(request *ModifyExecutionPlanClusterInfoRequest) (<-chan *ModifyExecutionPlanClusterInfoResponse, <-chan error) {
	responseChan := make(chan *ModifyExecutionPlanClusterInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ModifyExecutionPlanClusterInfo(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ModifyExecutionPlanClusterInfoWithCallback(request *ModifyExecutionPlanClusterInfoRequest, callback func(response *ModifyExecutionPlanClusterInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ModifyExecutionPlanClusterInfoResponse
		var err error
		defer close(result)
		response, err = client.ModifyExecutionPlanClusterInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ModifyExecutionPlanClusterInfoRequest struct {
	*requests.RpcRequest
	ZoneId                 string                                           `position:"Query" name:"ZoneId"`
	ClusterId              string                                           `position:"Query" name:"ClusterId"`
	IsOpenPublicIp         string                                           `position:"Query" name:"IsOpenPublicIp"`
	InstanceGeneration     string                                           `position:"Query" name:"InstanceGeneration"`
	OptionSoftWareList     *[]string                                        `position:"Query" name:"OptionSoftWareList"  type:"Repeated"`
	Id                     string                                           `position:"Query" name:"Id"`
	LogEnable              string                                           `position:"Query" name:"LogEnable"`
	UseLocalMetaDb         string                                           `position:"Query" name:"UseLocalMetaDb"`
	EcsOrder               *[]ModifyExecutionPlanClusterInfoEcsOrder        `position:"Query" name:"EcsOrder"  type:"Repeated"`
	NetType                string                                           `position:"Query" name:"NetType"`
	ResourceOwnerId        string                                           `position:"Query" name:"ResourceOwnerId"`
	HighAvailabilityEnable string                                           `position:"Query" name:"HighAvailabilityEnable"`
	BootstrapAction        *[]ModifyExecutionPlanClusterInfoBootstrapAction `position:"Query" name:"BootstrapAction"  type:"Repeated"`
	VSwitchId              string                                           `position:"Query" name:"VSwitchId"`
	SecurityGroupId        string                                           `position:"Query" name:"SecurityGroupId"`
	ClusterName            string                                           `position:"Query" name:"ClusterName"`
	LogPath                string                                           `position:"Query" name:"LogPath"`
	IoOptimized            string                                           `position:"Query" name:"IoOptimized"`
	ClusterType            string                                           `position:"Query" name:"ClusterType"`
	EasEnable              string                                           `position:"Query" name:"EasEnable"`
	EmrVer                 string                                           `position:"Query" name:"EmrVer"`
	Configurations         string                                           `position:"Query" name:"Configurations"`
	CreateClusterOnDemand  string                                           `position:"Query" name:"CreateClusterOnDemand"`
	VpcId                  string                                           `position:"Query" name:"VpcId"`
}

type ModifyExecutionPlanClusterInfoEcsOrder struct {
	Index        string `name:"Index"`
	NodeCount    string `name:"NodeCount"`
	InstanceType string `name:"InstanceType"`
	DiskType     string `name:"DiskType"`
	DiskCapacity string `name:"DiskCapacity"`
	NodeType     string `name:"NodeType"`
	DiskCount    string `name:"DiskCount"`
}
type ModifyExecutionPlanClusterInfoBootstrapAction struct {
	Name string `name:"Name"`
	Path string `name:"Path"`
	Arg  string `name:"Arg"`
}

type ModifyExecutionPlanClusterInfoResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

func CreateModifyExecutionPlanClusterInfoRequest() (request *ModifyExecutionPlanClusterInfoRequest) {
	request = &ModifyExecutionPlanClusterInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ModifyExecutionPlanClusterInfo", "", "")
	return
}

func CreateModifyExecutionPlanClusterInfoResponse() (response *ModifyExecutionPlanClusterInfoResponse) {
	response = &ModifyExecutionPlanClusterInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
