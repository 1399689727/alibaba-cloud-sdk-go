package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) RunClusterServiceAction(request *RunClusterServiceActionRequest) (response *RunClusterServiceActionResponse, err error) {
	response = CreateRunClusterServiceActionResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) RunClusterServiceActionWithChan(request *RunClusterServiceActionRequest) (<-chan *RunClusterServiceActionResponse, <-chan error) {
	responseChan := make(chan *RunClusterServiceActionResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RunClusterServiceAction(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) RunClusterServiceActionWithCallback(request *RunClusterServiceActionRequest, callback func(response *RunClusterServiceActionResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RunClusterServiceActionResponse
		var err error
		defer close(result)
		response, err = client.RunClusterServiceAction(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type RunClusterServiceActionRequest struct {
	*requests.RpcRequest
	OnlyRestartStaleConfigNodes string `position:"Query" name:"OnlyRestartStaleConfigNodes"`
	TotlerateFailCount          string `position:"Query" name:"TotlerateFailCount"`
	ClusterId                   string `position:"Query" name:"ClusterId"`
	TurnOnMaintenanceMode       string `position:"Query" name:"TurnOnMaintenanceMode"`
	ServiceName                 string `position:"Query" name:"ServiceName"`
	CustomCommand               string `position:"Query" name:"CustomCommand"`
	NodeCountPerBatch           string `position:"Query" name:"NodeCountPerBatch"`
	ServiceActionName           string `position:"Query" name:"ServiceActionName"`
	ComponentNameList           string `position:"Query" name:"ComponentNameList"`
	HostIdList                  string `position:"Query" name:"HostIdList"`
	IsRolling                   string `position:"Query" name:"IsRolling"`
	ResourceOwnerId             string `position:"Query" name:"ResourceOwnerId"`
	Comment                     string `position:"Query" name:"Comment"`
}

type RunClusterServiceActionResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

func CreateRunClusterServiceActionRequest() (request *RunClusterServiceActionRequest) {
	request = &RunClusterServiceActionRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "RunClusterServiceAction", "", "")
	return
}

func CreateRunClusterServiceActionResponse() (response *RunClusterServiceActionResponse) {
	response = &RunClusterServiceActionResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
