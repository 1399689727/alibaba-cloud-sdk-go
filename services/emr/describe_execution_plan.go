package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeExecutionPlan(request *DescribeExecutionPlanRequest) (response *DescribeExecutionPlanResponse, err error) {
	response = CreateDescribeExecutionPlanResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeExecutionPlanWithChan(request *DescribeExecutionPlanRequest) (<-chan *DescribeExecutionPlanResponse, <-chan error) {
	responseChan := make(chan *DescribeExecutionPlanResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeExecutionPlan(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeExecutionPlanWithCallback(request *DescribeExecutionPlanRequest, callback func(response *DescribeExecutionPlanResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeExecutionPlanResponse
		var err error
		defer close(result)
		response, err = client.DescribeExecutionPlan(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeExecutionPlanRequest struct {
	*requests.RpcRequest
	Id              string `position:"Query" name:"Id"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type DescribeExecutionPlanResponse struct {
	*responses.BaseResponse
	RequestId             string `json:"RequestId" xml:"RequestId"`
	Id                    string `json:"Id" xml:"Id"`
	Name                  string `json:"Name" xml:"Name"`
	Status                string `json:"Status" xml:"Status"`
	Strategy              string `json:"Strategy" xml:"Strategy"`
	TimeInterval          int    `json:"TimeInterval" xml:"TimeInterval"`
	StartTime             int64  `json:"StartTime" xml:"StartTime"`
	TimeUnit              string `json:"TimeUnit" xml:"TimeUnit"`
	DayOfWeek             string `json:"DayOfWeek" xml:"DayOfWeek"`
	DayOfMonth            string `json:"DayOfMonth" xml:"DayOfMonth"`
	CreateClusterOnDemand bool   `json:"CreateClusterOnDemand" xml:"CreateClusterOnDemand"`
	ClusterId             string `json:"ClusterId" xml:"ClusterId"`
	ClusterName           string `json:"ClusterName" xml:"ClusterName"`
	ExecutionPlanVersion  int64  `json:"ExecutionPlanVersion" xml:"ExecutionPlanVersion"`
	ClusterInfo           struct {
		Name                   string `json:"Name" xml:"Name"`
		ZoneId                 string `json:"ZoneId" xml:"ZoneId"`
		LogEnable              bool   `json:"LogEnable" xml:"LogEnable"`
		LogPath                string `json:"LogPath" xml:"LogPath"`
		SecurityGroupId        string `json:"SecurityGroupId" xml:"SecurityGroupId"`
		EmrVer                 string `json:"EmrVer" xml:"EmrVer"`
		ClusterType            string `json:"ClusterType" xml:"ClusterType"`
		HighAvailabilityEnable bool   `json:"HighAvailabilityEnable" xml:"HighAvailabilityEnable"`
		VpcId                  string `json:"VpcId" xml:"VpcId"`
		VSwitchId              string `json:"VSwitchId" xml:"VSwitchId"`
		NetType                string `json:"NetType" xml:"NetType"`
		IoOptimized            bool   `json:"IoOptimized" xml:"IoOptimized"`
		InstanceGeneration     string `json:"InstanceGeneration" xml:"InstanceGeneration"`
		Configurations         string `json:"Configurations" xml:"Configurations"`
		EasEnable              bool   `json:"EasEnable" xml:"EasEnable"`
		UserDefinedEmrEcsRole  string `json:"UserDefinedEmrEcsRole" xml:"UserDefinedEmrEcsRole"`
		SoftwareInfo           struct {
			EmrVer      string `json:"EmrVer" xml:"EmrVer"`
			ClusterType string `json:"ClusterType" xml:"ClusterType"`
			Softwares   []struct {
				DisplayName string `json:"DisplayName" xml:"DisplayName"`
				Name        string `json:"Name" xml:"Name"`
				OnlyDisplay bool   `json:"OnlyDisplay" xml:"OnlyDisplay"`
				StartTpe    int    `json:"StartTpe" xml:"StartTpe"`
				Version     string `json:"Version" xml:"Version"`
				Optional    bool   `json:"Optional" xml:"Optional"`
			} `json:"Softwares" xml:"Softwares"`
		} `json:"SoftwareInfo" xml:"SoftwareInfo"`
		EcsOrders []struct {
			Index        int    `json:"Index" xml:"Index"`
			NodeCount    int    `json:"NodeCount" xml:"NodeCount"`
			InstanceType string `json:"InstanceType" xml:"InstanceType"`
			DiskType     string `json:"DiskType" xml:"DiskType"`
			DiskCapacity int    `json:"DiskCapacity" xml:"DiskCapacity"`
			NodeType     string `json:"NodeType" xml:"NodeType"`
			DiskCount    int    `json:"DiskCount" xml:"DiskCount"`
		} `json:"EcsOrders" xml:"EcsOrders"`
		BootstrapActionList []struct {
			Name string `json:"Name" xml:"Name"`
			Path string `json:"Path" xml:"Path"`
			Arg  string `json:"Arg" xml:"Arg"`
		} `json:"BootstrapActionList" xml:"BootstrapActionList"`
	} `json:"ClusterInfo" xml:"ClusterInfo"`
	JobInfoList []struct {
		Id           string `json:"Id" xml:"Id"`
		Name         string `json:"Name" xml:"Name"`
		Type         string `json:"Type" xml:"Type"`
		RunParameter string `json:"RunParameter" xml:"RunParameter"`
		FailAct      string `json:"FailAct" xml:"FailAct"`
	} `json:"JobInfoList" xml:"JobInfoList"`
}

func CreateDescribeExecutionPlanRequest() (request *DescribeExecutionPlanRequest) {
	request = &DescribeExecutionPlanRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "DescribeExecutionPlan", "", "")
	return
}

func CreateDescribeExecutionPlanResponse() (response *DescribeExecutionPlanResponse) {
	response = &DescribeExecutionPlanResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
