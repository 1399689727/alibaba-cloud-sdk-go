package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListFailureJobExecutionInstances(request *ListFailureJobExecutionInstancesRequest) (response *ListFailureJobExecutionInstancesResponse, err error) {
	response = CreateListFailureJobExecutionInstancesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListFailureJobExecutionInstancesWithChan(request *ListFailureJobExecutionInstancesRequest) (<-chan *ListFailureJobExecutionInstancesResponse, <-chan error) {
	responseChan := make(chan *ListFailureJobExecutionInstancesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListFailureJobExecutionInstances(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListFailureJobExecutionInstancesWithCallback(request *ListFailureJobExecutionInstancesRequest, callback func(response *ListFailureJobExecutionInstancesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListFailureJobExecutionInstancesResponse
		var err error
		defer close(result)
		response, err = client.ListFailureJobExecutionInstances(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListFailureJobExecutionInstancesRequest struct {
	*requests.RpcRequest
	Count           string `position:"Query" name:"Count"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type ListFailureJobExecutionInstancesResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	JobInstances []struct {
		Id        string `json:"Id" xml:"Id"`
		JobName   string `json:"JobName" xml:"JobName"`
		StartTime int64  `json:"StartTime" xml:"StartTime"`
		RunTime   int    `json:"RunTime" xml:"RunTime"`
		JobType   string `json:"JobType" xml:"JobType"`
		JobId     string `json:"JobId" xml:"JobId"`
		ClusterId string `json:"ClusterId" xml:"ClusterId"`
		Status    string `json:"Status" xml:"Status"`
		RetryInfo string `json:"RetryInfo" xml:"RetryInfo"`
	} `json:"JobInstances" xml:"JobInstances"`
}

func CreateListFailureJobExecutionInstancesRequest() (request *ListFailureJobExecutionInstancesRequest) {
	request = &ListFailureJobExecutionInstancesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListFailureJobExecutionInstances", "", "")
	return
}

func CreateListFailureJobExecutionInstancesResponse() (response *ListFailureJobExecutionInstancesResponse) {
	response = &ListFailureJobExecutionInstancesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
