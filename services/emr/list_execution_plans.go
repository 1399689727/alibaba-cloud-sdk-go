package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListExecutionPlans(request *ListExecutionPlansRequest) (response *ListExecutionPlansResponse, err error) {
	response = CreateListExecutionPlansResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListExecutionPlansWithChan(request *ListExecutionPlansRequest) (<-chan *ListExecutionPlansResponse, <-chan error) {
	responseChan := make(chan *ListExecutionPlansResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListExecutionPlans(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListExecutionPlansWithCallback(request *ListExecutionPlansRequest, callback func(response *ListExecutionPlansResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListExecutionPlansResponse
		var err error
		defer close(result)
		response, err = client.ListExecutionPlans(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListExecutionPlansRequest struct {
	*requests.RpcRequest
	PageSize        string    `position:"Query" name:"PageSize"`
	QueryString     string    `position:"Query" name:"QueryString"`
	PageNumber      string    `position:"Query" name:"PageNumber"`
	ClusterId       string    `position:"Query" name:"ClusterId"`
	IsDesc          string    `position:"Query" name:"IsDesc"`
	Strategy        string    `position:"Query" name:"Strategy"`
	ResourceOwnerId string    `position:"Query" name:"ResourceOwnerId"`
	QueryType       string    `position:"Query" name:"QueryType"`
	StatusList      *[]string `position:"Query" name:"StatusList"  type:"Repeated"`
	JobId           string    `position:"Query" name:"JobId"`
}

type ListExecutionPlansResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	TotalCount     int    `json:"TotalCount" xml:"TotalCount"`
	PageNumber     int    `json:"PageNumber" xml:"PageNumber"`
	PageSize       int    `json:"PageSize" xml:"PageSize"`
	ExecutionPlans []struct {
		Id                    string `json:"Id" xml:"Id"`
		Name                  string `json:"Name" xml:"Name"`
		CreateClusterOnDemand bool   `json:"CreateClusterOnDemand" xml:"CreateClusterOnDemand"`
		Stragety              string `json:"Stragety" xml:"Stragety"`
		Status                string `json:"Status" xml:"Status"`
		TimeInterval          int    `json:"TimeInterval" xml:"TimeInterval"`
		StartTime             int64  `json:"StartTime" xml:"StartTime"`
		TimeUnit              string `json:"TimeUnit" xml:"TimeUnit"`
	} `json:"ExecutionPlans" xml:"ExecutionPlans"`
}

func CreateListExecutionPlansRequest() (request *ListExecutionPlansRequest) {
	request = &ListExecutionPlansRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListExecutionPlans", "", "")
	return
}

func CreateListExecutionPlansResponse() (response *ListExecutionPlansResponse) {
	response = &ListExecutionPlansResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
