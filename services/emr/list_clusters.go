package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListClusters(request *ListClustersRequest) (response *ListClustersResponse, err error) {
	response = CreateListClustersResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListClustersWithChan(request *ListClustersRequest) (<-chan *ListClustersResponse, <-chan error) {
	responseChan := make(chan *ListClustersResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListClusters(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListClustersWithCallback(request *ListClustersRequest, callback func(response *ListClustersResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListClustersResponse
		var err error
		defer close(result)
		response, err = client.ListClusters(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListClustersRequest struct {
	*requests.RpcRequest
	PageSize        string    `position:"Query" name:"PageSize"`
	PageNumber      string    `position:"Query" name:"PageNumber"`
	IsDesc          string    `position:"Query" name:"IsDesc"`
	ClusterTypeList *[]string `position:"Query" name:"ClusterTypeList"  type:"Repeated"`
	CreateType      string    `position:"Query" name:"CreateType"`
	ResourceOwnerId string    `position:"Query" name:"ResourceOwnerId"`
	StatusList      *[]string `position:"Query" name:"StatusList"  type:"Repeated"`
	DefaultStatus   string    `position:"Query" name:"DefaultStatus"`
}

type ListClustersResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	TotalCount int    `json:"TotalCount" xml:"TotalCount"`
	PageNumber int    `json:"PageNumber" xml:"PageNumber"`
	PageSize   int    `json:"PageSize" xml:"PageSize"`
	Clusters   []struct {
		Id                  string `json:"Id" xml:"Id"`
		Name                string `json:"Name" xml:"Name"`
		Type                string `json:"Type" xml:"Type"`
		CreateTime          int64  `json:"CreateTime" xml:"CreateTime"`
		RunningTime         int    `json:"RunningTime" xml:"RunningTime"`
		Status              string `json:"Status" xml:"Status"`
		ChargeType          string `json:"ChargeType" xml:"ChargeType"`
		ExpiredTime         int64  `json:"ExpiredTime" xml:"ExpiredTime"`
		Period              int    `json:"Period" xml:"Period"`
		HasUncompletedOrder bool   `json:"HasUncompletedOrder" xml:"HasUncompletedOrder"`
		OrderList           string `json:"OrderList" xml:"OrderList"`
		CreateResource      string `json:"CreateResource" xml:"CreateResource"`
		OrderTaskInfo       struct {
			TargetCount  int    `json:"TargetCount" xml:"TargetCount"`
			CurrentCount int    `json:"CurrentCount" xml:"CurrentCount"`
			OrderIdList  string `json:"OrderIdList" xml:"OrderIdList"`
		} `json:"OrderTaskInfo" xml:"OrderTaskInfo"`
		FailReason struct {
			ErrorCode string `json:"ErrorCode" xml:"ErrorCode"`
			ErrorMsg  string `json:"ErrorMsg" xml:"ErrorMsg"`
			RequestId string `json:"RequestId" xml:"RequestId"`
		} `json:"FailReason" xml:"FailReason"`
	} `json:"Clusters" xml:"Clusters"`
}

func CreateListClustersRequest() (request *ListClustersRequest) {
	request = &ListClustersRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListClusters", "", "")
	return
}

func CreateListClustersResponse() (response *ListClustersResponse) {
	response = &ListClustersResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
