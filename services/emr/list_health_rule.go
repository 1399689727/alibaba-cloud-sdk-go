package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListHealthRule(request *ListHealthRuleRequest) (response *ListHealthRuleResponse, err error) {
	response = CreateListHealthRuleResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListHealthRuleWithChan(request *ListHealthRuleRequest) (<-chan *ListHealthRuleResponse, <-chan error) {
	responseChan := make(chan *ListHealthRuleResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListHealthRule(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListHealthRuleWithCallback(request *ListHealthRuleRequest, callback func(response *ListHealthRuleResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListHealthRuleResponse
		var err error
		defer close(result)
		response, err = client.ListHealthRule(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListHealthRuleRequest struct {
	*requests.RpcRequest
	PageSize        string `position:"Query" name:"PageSize"`
	PageNumber      string `position:"Query" name:"PageNumber"`
	Component       string `position:"Query" name:"Component"`
	ClusterId       string `position:"Query" name:"ClusterId"`
	Service         string `position:"Query" name:"Service"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type ListHealthRuleResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	PageNumber int    `json:"PageNumber" xml:"PageNumber"`
	PageSize   int    `json:"PageSize" xml:"PageSize"`
	Total      int    `json:"Total" xml:"Total"`
	Rule       []struct {
		Id          int64  `json:"Id" xml:"Id"`
		Name        string `json:"Name" xml:"Name"`
		Status      string `json:"Status" xml:"Status"`
		Service     string `json:"Service" xml:"Service"`
		Component   string `json:"Component" xml:"Component"`
		Title       string `json:"Title" xml:"Title"`
		Description string `json:"Description" xml:"Description"`
		Explanation string `json:"Explanation" xml:"Explanation"`
		Solution    string `json:"Solution" xml:"Solution"`
	} `json:"Rule" xml:"Rule"`
}

func CreateListHealthRuleRequest() (request *ListHealthRuleRequest) {
	request = &ListHealthRuleRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListHealthRule", "", "")
	return
}

func CreateListHealthRuleResponse() (response *ListHealthRuleResponse) {
	response = &ListHealthRuleResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
