package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ResizeClusterV2(request *ResizeClusterV2Request) (response *ResizeClusterV2Response, err error) {
	response = CreateResizeClusterV2Response()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ResizeClusterV2WithChan(request *ResizeClusterV2Request) (<-chan *ResizeClusterV2Response, <-chan error) {
	responseChan := make(chan *ResizeClusterV2Response, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ResizeClusterV2(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ResizeClusterV2WithCallback(request *ResizeClusterV2Request, callback func(response *ResizeClusterV2Response, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ResizeClusterV2Response
		var err error
		defer close(result)
		response, err = client.ResizeClusterV2(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ResizeClusterV2Request struct {
	*requests.RpcRequest
	HostGroup *[]ResizeClusterV2HostGroup `position:"Query" name:"HostGroup"  type:"Repeated"`
	ClusterId string                      `position:"Query" name:"ClusterId"`
}

type ResizeClusterV2HostGroup struct {
	ClusterId       string `name:"ClusterId"`
	HostGroupId     string `name:"HostGroupId"`
	HostGroupName   string `name:"HostGroupName"`
	HostGroupType   string `name:"HostGroupType"`
	Comment         string `name:"Comment"`
	CreateType      string `name:"CreateType"`
	InstanceType    string `name:"InstanceType"`
	NodeCount       string `name:"NodeCount"`
	DiskType        string `name:"DiskType"`
	DiskCapacity    string `name:"DiskCapacity"`
	DiskCount       string `name:"DiskCount"`
	SysDiskCapacity string `name:"SysDiskCapacity"`
	ChargeType      string `name:"ChargeType"`
	Period          string `name:"Period"`
	AutoRenew       string `name:"AutoRenew"`
	VswitchId       string `name:"VswitchId"`
	SystemDiskType  string `name:"SystemDiskType"`
}

type ResizeClusterV2Response struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	ClusterId string `json:"ClusterId" xml:"ClusterId"`
}

func CreateResizeClusterV2Request() (request *ResizeClusterV2Request) {
	request = &ResizeClusterV2Request{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ResizeClusterV2", "", "")
	return
}

func CreateResizeClusterV2Response() (response *ResizeClusterV2Response) {
	response = &ResizeClusterV2Response{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
