package emr

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListClusterServiceForAdmin(request *ListClusterServiceForAdminRequest) (response *ListClusterServiceForAdminResponse, err error) {
	response = CreateListClusterServiceForAdminResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListClusterServiceForAdminWithChan(request *ListClusterServiceForAdminRequest) (<-chan *ListClusterServiceForAdminResponse, <-chan error) {
	responseChan := make(chan *ListClusterServiceForAdminResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListClusterServiceForAdmin(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListClusterServiceForAdminWithCallback(request *ListClusterServiceForAdminRequest, callback func(response *ListClusterServiceForAdminResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListClusterServiceForAdminResponse
		var err error
		defer close(result)
		response, err = client.ListClusterServiceForAdmin(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListClusterServiceForAdminRequest struct {
	*requests.RpcRequest
	PageSize        string `position:"Query" name:"PageSize"`
	PageNumber      string `position:"Query" name:"PageNumber"`
	ClusterId       string `position:"Query" name:"ClusterId"`
	ResourceOwnerId string `position:"Query" name:"ResourceOwnerId"`
}

type ListClusterServiceForAdminResponse struct {
	*responses.BaseResponse
	RequestId          string `json:"RequestId" xml:"RequestId"`
	TotalCount         int    `json:"TotalCount" xml:"TotalCount"`
	PageNumber         int    `json:"PageNumber" xml:"PageNumber"`
	PageSize           int    `json:"PageSize" xml:"PageSize"`
	ClusterServiceList []struct {
		ServiceName        string `json:"ServiceName" xml:"ServiceName"`
		ServiceDisplayName string `json:"ServiceDisplayName" xml:"ServiceDisplayName"`
		ServiceVersion     string `json:"ServiceVersion" xml:"ServiceVersion"`
		InstallStatus      bool   `json:"InstallStatus" xml:"InstallStatus"`
		ClientType         bool   `json:"ClientType" xml:"ClientType"`
		ServiceStatus      string `json:"ServiceStatus" xml:"ServiceStatus"`
		HealthStatus       string `json:"HealthStatus" xml:"HealthStatus"`
		NeedRestartInfo    string `json:"NeedRestartInfo" xml:"NeedRestartInfo"`
		NotStartInfo       string `json:"NotStartInfo" xml:"NotStartInfo"`
		AbnormalNum        int    `json:"AbnormalNum" xml:"AbnormalNum"`
		StoppedNum         int    `json:"StoppedNum" xml:"StoppedNum"`
		NeedRestartNum     int    `json:"NeedRestartNum" xml:"NeedRestartNum"`
		ServiceActionList  []struct {
			ServiceName   string `json:"ServiceName" xml:"ServiceName"`
			ComponentName string `json:"ComponentName" xml:"ComponentName"`
			ActionName    string `json:"ActionName" xml:"ActionName"`
			Command       string `json:"Command" xml:"Command"`
			DisplayName   string `json:"DisplayName" xml:"DisplayName"`
		} `json:"ServiceActionList" xml:"ServiceActionList"`
	} `json:"ClusterServiceList" xml:"ClusterServiceList"`
}

func CreateListClusterServiceForAdminRequest() (request *ListClusterServiceForAdminRequest) {
	request = &ListClusterServiceForAdminRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Emr", "2016-04-08", "ListClusterServiceForAdmin", "", "")
	return
}

func CreateListClusterServiceForAdminResponse() (response *ListClusterServiceForAdminResponse) {
	response = &ListClusterServiceForAdminResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
