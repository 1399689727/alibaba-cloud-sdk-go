package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeDrdsInstances(request *DescribeDrdsInstancesRequest) (response *DescribeDrdsInstancesResponse, err error) {
	response = CreateDescribeDrdsInstancesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeDrdsInstancesWithChan(request *DescribeDrdsInstancesRequest) (<-chan *DescribeDrdsInstancesResponse, <-chan error) {
	responseChan := make(chan *DescribeDrdsInstancesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDrdsInstances(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeDrdsInstancesWithCallback(request *DescribeDrdsInstancesRequest, callback func(response *DescribeDrdsInstancesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDrdsInstancesResponse
		var err error
		defer close(result)
		response, err = client.DescribeDrdsInstances(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeDrdsInstancesRequest struct {
	*requests.RpcRequest
	Type string `position:"Query" name:"Type"`
}

type DescribeDrdsInstancesResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      []struct {
		DrdsInstanceId string `json:"DrdsInstanceId" xml:"DrdsInstanceId"`
		Type           string `json:"Type" xml:"Type"`
		RegionId       string `json:"RegionId" xml:"RegionId"`
		ZoneId         string `json:"ZoneId" xml:"ZoneId"`
		Description    string `json:"Description" xml:"Description"`
		NetworkType    string `json:"NetworkType" xml:"NetworkType"`
		Status         string `json:"Status" xml:"Status"`
		CreateTime     int64  `json:"CreateTime" xml:"CreateTime"`
		Version        int64  `json:"Version" xml:"Version"`
		Vips           []struct {
			IP   string `json:"IP" xml:"IP"`
			Port string `json:"Port" xml:"Port"`
			Type string `json:"Type" xml:"Type"`
		} `json:"Vips" xml:"Vips"`
	} `json:"Data" xml:"Data"`
}

func CreateDescribeDrdsInstancesRequest() (request *DescribeDrdsInstancesRequest) {
	request = &DescribeDrdsInstancesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2017-10-16", "DescribeDrdsInstances", "", "")
	return
}

func CreateDescribeDrdsInstancesResponse() (response *DescribeDrdsInstancesResponse) {
	response = &DescribeDrdsInstancesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
