package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) CreateDrdsInstance(request *CreateDrdsInstanceRequest) (response *CreateDrdsInstanceResponse, err error) {
	response = CreateCreateDrdsInstanceResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) CreateDrdsInstanceWithChan(request *CreateDrdsInstanceRequest) (<-chan *CreateDrdsInstanceResponse, <-chan error) {
	responseChan := make(chan *CreateDrdsInstanceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateDrdsInstance(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) CreateDrdsInstanceWithCallback(request *CreateDrdsInstanceRequest, callback func(response *CreateDrdsInstanceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateDrdsInstanceResponse
		var err error
		defer close(result)
		response, err = client.CreateDrdsInstance(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type CreateDrdsInstanceRequest struct {
	*requests.RpcRequest
	VswitchId      string `position:"Query" name:"VswitchId"`
	ZoneId         string `position:"Query" name:"ZoneId"`
	Description    string `position:"Query" name:"Description"`
	PayType        string `position:"Query" name:"PayType"`
	Specification  string `position:"Query" name:"Specification"`
	InstanceSeries string `position:"Query" name:"instanceSeries"`
	Quantity       string `position:"Query" name:"Quantity"`
	VpcId          string `position:"Query" name:"VpcId"`
	Type           string `position:"Query" name:"Type"`
}

type CreateDrdsInstanceResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Data      struct {
		OrderId            int64    `json:"OrderId" xml:"OrderId"`
		DrdsInstanceIdList []string `json:"DrdsInstanceIdList" xml:"DrdsInstanceIdList"`
	} `json:"Data" xml:"Data"`
}

func CreateCreateDrdsInstanceRequest() (request *CreateDrdsInstanceRequest) {
	request = &CreateDrdsInstanceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2017-10-16", "CreateDrdsInstance", "", "")
	return
}

func CreateCreateDrdsInstanceResponse() (response *CreateDrdsInstanceResponse) {
	response = &CreateDrdsInstanceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
