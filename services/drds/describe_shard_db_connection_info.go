package drds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeShardDbConnectionInfo(request *DescribeShardDbConnectionInfoRequest) (response *DescribeShardDbConnectionInfoResponse, err error) {
	response = CreateDescribeShardDbConnectionInfoResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeShardDbConnectionInfoWithChan(request *DescribeShardDbConnectionInfoRequest) (<-chan *DescribeShardDbConnectionInfoResponse, <-chan error) {
	responseChan := make(chan *DescribeShardDbConnectionInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeShardDbConnectionInfo(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeShardDbConnectionInfoWithCallback(request *DescribeShardDbConnectionInfoRequest, callback func(response *DescribeShardDbConnectionInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeShardDbConnectionInfoResponse
		var err error
		defer close(result)
		response, err = client.DescribeShardDbConnectionInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeShardDbConnectionInfoRequest struct {
	*requests.RpcRequest
	SubDbName      string `position:"Query" name:"SubDbName"`
	DrdsInstanceId string `position:"Query" name:"DrdsInstanceId"`
	DbName         string `position:"Query" name:"DbName"`
}

type DescribeShardDbConnectionInfoResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	Success        bool   `json:"Success" xml:"Success"`
	ConnectionInfo struct {
		InstanceName               string `json:"InstanceName" xml:"InstanceName"`
		InstanceUrl                string `json:"InstanceUrl" xml:"InstanceUrl"`
		SubDbName                  string `json:"subDbName" xml:"subDbName"`
		DbStatus                   string `json:"dbStatus" xml:"dbStatus"`
		DbType                     string `json:"dbType" xml:"dbType"`
		MinPoolSize                int    `json:"minPoolSize" xml:"minPoolSize"`
		MaxPoolSize                int    `json:"maxPoolSize" xml:"maxPoolSize"`
		IdleTimeOut                int    `json:"idleTimeOut" xml:"idleTimeOut"`
		BlockingTimeout            int    `json:"blockingTimeout" xml:"blockingTimeout"`
		ConnectionProperties       string `json:"connectionProperties" xml:"connectionProperties"`
		PreparedStatementCacheSize int    `json:"preparedStatementCacheSize" xml:"preparedStatementCacheSize"`
		UserName                   string `json:"userName" xml:"userName"`
	} `json:"ConnectionInfo" xml:"ConnectionInfo"`
}

func CreateDescribeShardDbConnectionInfoRequest() (request *DescribeShardDbConnectionInfoRequest) {
	request = &DescribeShardDbConnectionInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Drds", "2017-10-16", "DescribeShardDbConnectionInfo", "", "")
	return
}

func CreateDescribeShardDbConnectionInfoResponse() (response *DescribeShardDbConnectionInfoResponse) {
	response = &DescribeShardDbConnectionInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
