package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetMaterial(request *GetMaterialRequest) (response *GetMaterialResponse, err error) {
	response = CreateGetMaterialResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetMaterialWithChan(request *GetMaterialRequest) (<-chan *GetMaterialResponse, <-chan error) {
	responseChan := make(chan *GetMaterialResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetMaterial(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetMaterialWithCallback(request *GetMaterialRequest, callback func(response *GetMaterialResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetMaterialResponse
		var err error
		defer close(result)
		response, err = client.GetMaterial(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetMaterialRequest struct {
	*requests.RpcRequest
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	OwnerId              string `position:"Query" name:"OwnerId"`
	MaterialId           string `position:"Query" name:"MaterialId"`
}

type GetMaterialResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Material  struct {
		MaterialId   string   `json:"MaterialId" xml:"MaterialId"`
		Title        string   `json:"Title" xml:"Title"`
		Tags         string   `json:"Tags" xml:"Tags"`
		Status       string   `json:"Status" xml:"Status"`
		Size         int64    `json:"Size" xml:"Size"`
		Duration     float64  `json:"Duration" xml:"Duration"`
		Description  string   `json:"Description" xml:"Description"`
		CreationTime string   `json:"CreationTime" xml:"CreationTime"`
		ModifiedTime string   `json:"ModifiedTime" xml:"ModifiedTime"`
		CoverURL     string   `json:"CoverURL" xml:"CoverURL"`
		CateId       int      `json:"CateId" xml:"CateId"`
		CateName     string   `json:"CateName" xml:"CateName"`
		Source       string   `json:"Source" xml:"Source"`
		Snapshots    []string `json:"Snapshots" xml:"Snapshots"`
		Sprites      []string `json:"Sprites" xml:"Sprites"`
	} `json:"Material" xml:"Material"`
}

func CreateGetMaterialRequest() (request *GetMaterialRequest) {
	request = &GetMaterialRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-07-13", "GetMaterial", "", "")
	return
}

func CreateGetMaterialResponse() (response *GetMaterialResponse) {
	response = &GetMaterialResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
