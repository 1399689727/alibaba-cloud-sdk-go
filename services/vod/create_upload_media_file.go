package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) CreateUploadMediaFile(request *CreateUploadMediaFileRequest) (response *CreateUploadMediaFileResponse, err error) {
	response = CreateCreateUploadMediaFileResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) CreateUploadMediaFileWithChan(request *CreateUploadMediaFileRequest) (<-chan *CreateUploadMediaFileResponse, <-chan error) {
	responseChan := make(chan *CreateUploadMediaFileResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateUploadMediaFile(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) CreateUploadMediaFileWithCallback(request *CreateUploadMediaFileRequest, callback func(response *CreateUploadMediaFileResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateUploadMediaFileResponse
		var err error
		defer close(result)
		response, err = client.CreateUploadMediaFile(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type CreateUploadMediaFileRequest struct {
	*requests.RpcRequest
	UserData             string `position:"Query" name:"UserData"`
	FileExtension        string `position:"Query" name:"FileExtension"`
	ResourceOwnerAccount string `position:"Query" name:"ResourceOwnerAccount"`
	BusinessType         string `position:"Query" name:"BusinessType"`
	MediaId              string `position:"Query" name:"MediaId"`
	ResourceOwnerId      string `position:"Query" name:"ResourceOwnerId"`
	OwnerId              string `position:"Query" name:"OwnerId"`
}

type CreateUploadMediaFileResponse struct {
	*responses.BaseResponse
	RequestId     string `json:"RequestId" xml:"RequestId"`
	MediaFileInfo struct {
		MediaFileId   string `json:"MediaFileId" xml:"MediaFileId"`
		MediaId       string `json:"MediaId" xml:"MediaId"`
		UserData      string `json:"UserData" xml:"UserData"`
		MediaFilePath string `json:"MediaFilePath" xml:"MediaFilePath"`
		MediaFileAuth string `json:"MediaFileAuth" xml:"MediaFileAuth"`
		MediaFileURL  string `json:"MediaFileURL" xml:"MediaFileURL"`
	} `json:"MediaFileInfo" xml:"MediaFileInfo"`
}

func CreateCreateUploadMediaFileRequest() (request *CreateUploadMediaFileRequest) {
	request = &CreateUploadMediaFileRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-07-13", "CreateUploadMediaFile", "", "")
	return
}

func CreateCreateUploadMediaFileResponse() (response *CreateUploadMediaFileResponse) {
	response = &CreateUploadMediaFileResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
