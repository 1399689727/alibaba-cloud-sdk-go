//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rtc

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetMPUTaskParam invokes the rtc.GetMPUTaskParam API synchronously
// api document: https://help.aliyun.com/api/rtc/getmputaskparam.html
func (client *Client) GetMPUTaskParam(request *GetMPUTaskParamRequest) (response *GetMPUTaskParamResponse, err error) {
	response = CreateGetMPUTaskParamResponse()
	err = client.DoAction(request, response)
	return
}

// GetMPUTaskParamWithChan invokes the rtc.GetMPUTaskParam API asynchronously
// api document: https://help.aliyun.com/api/rtc/getmputaskparam.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetMPUTaskParamWithChan(request *GetMPUTaskParamRequest) (<-chan *GetMPUTaskParamResponse, <-chan error) {
	responseChan := make(chan *GetMPUTaskParamResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetMPUTaskParam(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetMPUTaskParamWithCallback invokes the rtc.GetMPUTaskParam API asynchronously
// api document: https://help.aliyun.com/api/rtc/getmputaskparam.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetMPUTaskParamWithCallback(request *GetMPUTaskParamRequest, callback func(response *GetMPUTaskParamResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetMPUTaskParamResponse
		var err error
		defer close(result)
		response, err = client.GetMPUTaskParam(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetMPUTaskParamRequest is the request struct for api GetMPUTaskParam
type GetMPUTaskParamRequest struct {
	*requests.RpcRequest
	OwnerId requests.Integer `position:"Query" name:"OwnerId"`
	AppId   string           `position:"Query" name:"AppId"`
	TaskId  string           `position:"Query" name:"TaskId"`
}

// GetMPUTaskParamResponse is the response struct for api GetMPUTaskParam
type GetMPUTaskParamResponse struct {
	*responses.BaseResponse
	RequestId       string                     `json:"RequestId" xml:"RequestId"`
	ChannelId       string                     `json:"ChannelId" xml:"ChannelId"`
	TemplateId      int64                      `json:"TemplateId" xml:"TemplateId"`
	MediaEncode     int                        `json:"MediaEncode" xml:"MediaEncode"`
	BackgroundColor int                        `json:"BackgroundColor" xml:"BackgroundColor"`
	UserPanes       GetMPUTaskParamUserPanes0  `json:"UserPanes" xml:"UserPanes"`
	LayoutIds       []string                   `json:"LayoutIds" xml:"LayoutIds"`
	LiveConfig      GetMPUTaskParamLiveConfig0 `json:"LiveConfig" xml:"LiveConfig"`
}

type GetMPUTaskParamUserPanes0 struct {
	UserPanes []GetMPUTaskParamUserPanes1 `json:"UserPanes" xml:"UserPanes"`
}

type GetMPUTaskParamUserPanes1 struct {
	PaneId     int    `json:"PaneId" xml:"PaneId"`
	UserId     string `json:"UserId" xml:"UserId"`
	SourceType string `json:"SourceType" xml:"SourceType"`
}

type GetMPUTaskParamLiveConfig0 struct {
	StreamURL string `json:"StreamURL" xml:"StreamURL"`
}

// CreateGetMPUTaskParamRequest creates a request to invoke GetMPUTaskParam API
func CreateGetMPUTaskParamRequest() (request *GetMPUTaskParamRequest) {
	request = &GetMPUTaskParamRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("rtc", "2018-01-11", "GetMPUTaskParam", "rtc", "openAPI")
	return
}

// CreateGetMPUTaskParamResponse creates a response to parse from GetMPUTaskParam response
func CreateGetMPUTaskParamResponse() (response *GetMPUTaskParamResponse) {
	response = &GetMPUTaskParamResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
