package itaas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) TrustDeviceRegisterClient(request *TrustDeviceRegisterClientRequest) (response *TrustDeviceRegisterClientResponse, err error) {
	response = CreateTrustDeviceRegisterClientResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) TrustDeviceRegisterClientWithChan(request *TrustDeviceRegisterClientRequest) (<-chan *TrustDeviceRegisterClientResponse, <-chan error) {
	responseChan := make(chan *TrustDeviceRegisterClientResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.TrustDeviceRegisterClient(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) TrustDeviceRegisterClientWithCallback(request *TrustDeviceRegisterClientRequest, callback func(response *TrustDeviceRegisterClientResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *TrustDeviceRegisterClientResponse
		var err error
		defer close(result)
		response, err = client.TrustDeviceRegisterClient(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type TrustDeviceRegisterClientRequest struct {
	*requests.RpcRequest
	Uid           string `position:"Query" name:"Uid"`
	Sid           string `position:"Query" name:"Sid"`
	AuthType      string `position:"Query" name:"AuthType"`
	ClientIp      string `position:"Query" name:"ClientIp"`
	OsType        string `position:"Query" name:"OsType"`
	DeviceUmid    string `position:"Query" name:"DeviceUmid"`
	AppVersion    string `position:"Query" name:"AppVersion"`
	Cid           string `position:"Query" name:"Cid"`
	DeviceId      string `position:"Query" name:"DeviceId"`
	Utdid         string `position:"Query" name:"Utdid"`
	AppName       string `position:"Query" name:"AppName"`
	Macs          string `position:"Query" name:"Macs"`
	DeviceName    string `position:"Query" name:"DeviceName"`
	Language      string `position:"Query" name:"Language"`
	Rtid          string `position:"Query" name:"Rtid"`
	SecurityToken string `position:"Query" name:"SecurityToken"`
	SerialNo      string `position:"Query" name:"SerialNo"`
}

type TrustDeviceRegisterClientResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Success      bool   `json:"Success" xml:"Success"`
	Code         string `json:"Code" xml:"Code"`
	BusinessCode string `json:"BusinessCode" xml:"BusinessCode"`
	Message      string `json:"Message" xml:"Message"`
	ResultData   struct {
		PlistContent string `json:"PlistContent" xml:"PlistContent"`
		Umid         string `json:"Umid" xml:"Umid"`
		ProcessToken string `json:"ProcessToken" xml:"ProcessToken"`
		TokenKey     string `json:"TokenKey" xml:"TokenKey"`
		CertDO       struct {
			SerialNo  string `json:"SerialNo" xml:"SerialNo"`
			SubjectDn string `json:"SubjectDn" xml:"SubjectDn"`
			IssueDn   string `json:"IssueDn" xml:"IssueDn"`
			Status    string `json:"Status" xml:"Status"`
			P12File   string `json:"P12File" xml:"P12File"`
			P12Pwd    string `json:"P12Pwd" xml:"P12Pwd"`
		} `json:"CertDO" xml:"CertDO"`
	} `json:"ResultData" xml:"ResultData"`
}

func CreateTrustDeviceRegisterClientRequest() (request *TrustDeviceRegisterClientRequest) {
	request = &TrustDeviceRegisterClientRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ITaaS", "2017-05-12", "TrustDeviceRegisterClient", "", "")
	return
}

func CreateTrustDeviceRegisterClientResponse() (response *TrustDeviceRegisterClientResponse) {
	response = &TrustDeviceRegisterClientResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
