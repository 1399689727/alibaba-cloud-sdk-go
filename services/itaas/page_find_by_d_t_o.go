package itaas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) PageFindByDTO(request *PageFindByDTORequest) (response *PageFindByDTOResponse, err error) {
	response = CreatePageFindByDTOResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) PageFindByDTOWithChan(request *PageFindByDTORequest) (<-chan *PageFindByDTOResponse, <-chan error) {
	responseChan := make(chan *PageFindByDTOResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PageFindByDTO(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) PageFindByDTOWithCallback(request *PageFindByDTORequest, callback func(response *PageFindByDTOResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PageFindByDTOResponse
		var err error
		defer close(result)
		response, err = client.PageFindByDTO(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type PageFindByDTORequest struct {
	*requests.RpcRequest
	Sid           string `position:"Query" name:"Sid"`
	AuthType      string `position:"Query" name:"AuthType"`
	Status        string `position:"Query" name:"Status"`
	OsType        string `position:"Query" name:"OsType"`
	Mac           string `position:"Query" name:"Mac"`
	CurrentPage   string `position:"Query" name:"CurrentPage"`
	NetworkType   string `position:"Query" name:"NetworkType"`
	Rows          string `position:"Query" name:"Rows"`
	MapStatus     string `position:"Query" name:"MapStatus"`
	DeviceName    string `position:"Query" name:"DeviceName"`
	Language      string `position:"Query" name:"Language"`
	Umid          string `position:"Query" name:"Umid"`
	SecurityToken string `position:"Query" name:"SecurityToken"`
	User          string `position:"Query" name:"User"`
	SerialNo      string `position:"Query" name:"SerialNo"`
}

type PageFindByDTOResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Success      bool   `json:"success" xml:"success"`
	Code         string `json:"Code" xml:"Code"`
	BusinessCode string `json:"BusinessCode" xml:"BusinessCode"`
	Message      string `json:"Message" xml:"Message"`
	Total        int    `json:"Total" xml:"Total"`
	CurrentPager int    `json:"CurrentPager" xml:"CurrentPager"`
	Rowsize      int    `json:"Rowsize" xml:"Rowsize"`
	MaxPager     int    `json:"MaxPager" xml:"MaxPager"`
	ResultData   []struct {
		Id            int64  `json:"Id" xml:"Id"`
		GmtCreate     string `json:"GmtCreate" xml:"GmtCreate"`
		GmtModified   string `json:"GmtModified" xml:"GmtModified"`
		User          string `json:"User" xml:"User"`
		Cid           string `json:"Cid" xml:"Cid"`
		Mac           string `json:"Mac" xml:"Mac"`
		NetworkType   string `json:"NetworkType" xml:"NetworkType"`
		AuthType      int    `json:"AuthType" xml:"AuthType"`
		LastAuthTime  string `json:"LastAuthTime" xml:"LastAuthTime"`
		Install       bool   `json:"Install" xml:"Install"`
		MapStatus     int    `json:"MapStatus" xml:"MapStatus"`
		Status        int    `json:"Status" xml:"Status"`
		OsType        string `json:"OsType" xml:"OsType"`
		SerialNo      string `json:"SerialNo" xml:"SerialNo"`
		DeviceName    string `json:"DeviceName" xml:"DeviceName"`
		Umid          string `json:"Umid" xml:"Umid"`
		HeartbeatTime int64  `json:"HeartbeatTime" xml:"HeartbeatTime"`
		Version       string `json:"Version" xml:"Version"`
	} `json:"ResultData" xml:"ResultData"`
}

func CreatePageFindByDTORequest() (request *PageFindByDTORequest) {
	request = &PageFindByDTORequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ITaaS", "2017-05-12", "PageFindByDTO", "", "")
	return
}

func CreatePageFindByDTOResponse() (response *PageFindByDTOResponse) {
	response = &PageFindByDTOResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
