package itaas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) OAAuthSMSCodeService(request *OAAuthSMSCodeServiceRequest) (response *OAAuthSMSCodeServiceResponse, err error) {
	response = CreateOAAuthSMSCodeServiceResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) OAAuthSMSCodeServiceWithChan(request *OAAuthSMSCodeServiceRequest) (<-chan *OAAuthSMSCodeServiceResponse, <-chan error) {
	responseChan := make(chan *OAAuthSMSCodeServiceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OAAuthSMSCodeService(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) OAAuthSMSCodeServiceWithCallback(request *OAAuthSMSCodeServiceRequest, callback func(response *OAAuthSMSCodeServiceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OAAuthSMSCodeServiceResponse
		var err error
		defer close(result)
		response, err = client.OAAuthSMSCodeService(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type OAAuthSMSCodeServiceRequest struct {
	*requests.RpcRequest
	MobilePhone string `position:"Query" name:"MobilePhone"`
	StateCode   string `position:"Query" name:"StateCode"`
	SmsCode     string `position:"Query" name:"SmsCode"`
	OsType      string `position:"Query" name:"OsType"`
	AppVersion  string `position:"Query" name:"AppVersion"`
	Language    string `position:"Query" name:"Language"`
	DeviceId    string `position:"Query" name:"DeviceId"`
}

type OAAuthSMSCodeServiceResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	BusinessCode string `json:"BusinessCode" xml:"BusinessCode"`
	Message      string `json:"Message" xml:"Message"`
	Success      bool   `json:"Success" xml:"Success"`
	ResultData   struct {
		AgreeURL string `json:"AgreeURL" xml:"AgreeURL"`
		Uid      int64  `json:"Uid" xml:"Uid"`
		Rid      string `json:"Rid" xml:"Rid"`
		Sid      string `json:"Sid" xml:"Sid"`
		CInfo    struct {
			Cid   string `json:"Cid" xml:"Cid"`
			Cname string `json:"Cname" xml:"Cname"`
		} `json:"CInfo" xml:"CInfo"`
		UserInfo struct {
			Nick       string `json:"Nick" xml:"Nick"`
			NickPinyin string `json:"NickPinyin" xml:"NickPinyin"`
			Gender     string `json:"Gender" xml:"Gender"`
		} `json:"UserInfo" xml:"UserInfo"`
	} `json:"ResultData" xml:"ResultData"`
}

func CreateOAAuthSMSCodeServiceRequest() (request *OAAuthSMSCodeServiceRequest) {
	request = &OAAuthSMSCodeServiceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ITaaS", "2017-05-12", "OAAuthSMSCodeService", "", "")
	return
}

func CreateOAAuthSMSCodeServiceResponse() (response *OAAuthSMSCodeServiceResponse) {
	response = &OAAuthSMSCodeServiceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
