package market

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QueryMarketImages(request *QueryMarketImagesRequest) (response *QueryMarketImagesResponse, err error) {
	response = CreateQueryMarketImagesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QueryMarketImagesWithChan(request *QueryMarketImagesRequest) (<-chan *QueryMarketImagesResponse, <-chan error) {
	responseChan := make(chan *QueryMarketImagesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryMarketImages(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QueryMarketImagesWithCallback(request *QueryMarketImagesRequest, callback func(response *QueryMarketImagesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryMarketImagesResponse
		var err error
		defer close(result)
		response, err = client.QueryMarketImages(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QueryMarketImagesRequest struct {
	*requests.RpcRequest
	Param string `position:"Query" name:"Param"`
}

type QueryMarketImagesResponse struct {
	*responses.BaseResponse
	PageNumber int    `json:"PageNumber" xml:"PageNumber"`
	PageSize   int    `json:"PageSize" xml:"PageSize"`
	TotalCount int    `json:"TotalCount" xml:"TotalCount"`
	RequestId  string `json:"RequestId" xml:"RequestId"`
	Result     []struct {
		ImageProductCode string   `json:"ImageProductCode" xml:"ImageProductCode"`
		ProductName      string   `json:"ProductName" xml:"ProductName"`
		CategoryName     string   `json:"CategoryName" xml:"CategoryName"`
		SupplierName     string   `json:"SupplierName" xml:"SupplierName"`
		BaseSystem       string   `json:"BaseSystem" xml:"BaseSystem"`
		OsKind           string   `json:"OsKind" xml:"OsKind"`
		OsBit            int      `json:"OsBit" xml:"OsBit"`
		PictureUrl       string   `json:"PictureUrl" xml:"PictureUrl"`
		SmallPicUrl      string   `json:"SmallPicUrl" xml:"SmallPicUrl"`
		ShortDescription string   `json:"ShortDescription" xml:"ShortDescription"`
		AgreementUrl     string   `json:"AgreementUrl" xml:"AgreementUrl"`
		DetailUrl        string   `json:"DetailUrl" xml:"DetailUrl"`
		BuyUrl           string   `json:"BuyUrl" xml:"BuyUrl"`
		StoreUrl         string   `json:"StoreUrl" xml:"StoreUrl"`
		Score            float64  `json:"Score" xml:"Score"`
		UserCount        int64    `json:"UserCount" xml:"UserCount"`
		SupportIO        bool     `json:"SupportIO" xml:"SupportIO"`
		CreatedOn        int64    `json:"CreatedOn" xml:"CreatedOn"`
		SkuCodes         []string `json:"SkuCodes" xml:"SkuCodes"`
		Quota            struct {
			TotalQuota  int64 `json:"TotalQuota" xml:"TotalQuota"`
			UsingQuota  int64 `json:"UsingQuota" xml:"UsingQuota"`
			UnusedQuota int64 `json:"UnusedQuota" xml:"UnusedQuota"`
		} `json:"Quota" xml:"Quota"`
		PriceInfo struct {
			Order struct {
				OriginalPrice float64  `json:"OriginalPrice" xml:"OriginalPrice"`
				DiscountPrice float64  `json:"DiscountPrice" xml:"DiscountPrice"`
				TradePrice    float64  `json:"TradePrice" xml:"TradePrice"`
				Currency      string   `json:"Currency" xml:"Currency"`
				Period        int      `json:"Period" xml:"Period"`
				PriceUnit     string   `json:"PriceUnit" xml:"PriceUnit"`
				RuleIdSet     []string `json:"RuleIdSet" xml:"RuleIdSet"`
			} `json:"Order" xml:"Order"`
			Rules []struct {
				RuleId int64  `json:"RuleId" xml:"RuleId"`
				Title  string `json:"Title" xml:"Title"`
				Name   string `json:"Name" xml:"Name"`
			} `json:"Rules" xml:"Rules"`
		} `json:"PriceInfo" xml:"PriceInfo"`
		Images []struct {
			Version            string `json:"Version" xml:"Version"`
			VersionDescription string `json:"VersionDescription" xml:"VersionDescription"`
			ImageId            string `json:"ImageId" xml:"ImageId"`
			ImageSize          int    `json:"ImageSize" xml:"ImageSize"`
			Region             string `json:"Region" xml:"Region"`
			IsDefault          bool   `json:"IsDefault" xml:"IsDefault"`
			SupportIO          bool   `json:"SupportIO" xml:"SupportIO"`
			DiskDeviceMappings []struct {
				DiskType        string `json:"DiskType" xml:"DiskType"`
				Format          string `json:"Format" xml:"Format"`
				SnapshotId      string `json:"SnapshotId" xml:"SnapshotId"`
				Size            int    `json:"Size" xml:"Size"`
				Device          string `json:"Device" xml:"Device"`
				ImportOSSBucket string `json:"ImportOSSBucket" xml:"ImportOSSBucket"`
				ImportOSSObject string `json:"ImportOSSObject" xml:"ImportOSSObject"`
			} `json:"DiskDeviceMappings" xml:"DiskDeviceMappings"`
		} `json:"Images" xml:"Images"`
	} `json:"Result" xml:"Result"`
}

func CreateQueryMarketImagesRequest() (request *QueryMarketImagesRequest) {
	request = &QueryMarketImagesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Market", "2015-11-01", "QueryMarketImages", "", "")
	return
}

func CreateQueryMarketImagesResponse() (response *QueryMarketImagesResponse) {
	response = &QueryMarketImagesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
