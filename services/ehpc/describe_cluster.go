package ehpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCluster(request *DescribeClusterRequest) (response *DescribeClusterResponse, err error) {
	response = CreateDescribeClusterResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeClusterWithChan(request *DescribeClusterRequest) (<-chan *DescribeClusterResponse, <-chan error) {
	responseChan := make(chan *DescribeClusterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCluster(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeClusterWithCallback(request *DescribeClusterRequest, callback func(response *DescribeClusterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeClusterResponse
		var err error
		defer close(result)
		response, err = client.DescribeCluster(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeClusterRequest struct {
	*requests.RpcRequest
	ClusterId string `position:"Query" name:"ClusterId"`
}

type DescribeClusterResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId" xml:"RequestId"`
	ClusterInfo struct {
		Id               string `json:"Id" xml:"Id"`
		RegionId         string `json:"RegionId" xml:"RegionId"`
		Name             string `json:"Name" xml:"Name"`
		Description      string `json:"Description" xml:"Description"`
		Status           string `json:"Status" xml:"Status"`
		OsTag            string `json:"OsTag" xml:"OsTag"`
		AccountType      string `json:"AccountType" xml:"AccountType"`
		SchedulerType    string `json:"SchedulerType" xml:"SchedulerType"`
		CreateTime       string `json:"CreateTime" xml:"CreateTime"`
		SecurityGroupId  string `json:"SecurityGroupId" xml:"SecurityGroupId"`
		VSwitchId        string `json:"VSwitchId" xml:"VSwitchId"`
		VolumeType       string `json:"VolumeType" xml:"VolumeType"`
		VolumeId         string `json:"VolumeId" xml:"VolumeId"`
		VolumeProtocol   string `json:"VolumeProtocol" xml:"VolumeProtocol"`
		VolumeMountpoint string `json:"VolumeMountpoint" xml:"VolumeMountpoint"`
		RemoteDirectory  string `json:"RemoteDirectory" xml:"RemoteDirectory"`
		HaEnable         bool   `json:"HaEnable" xml:"HaEnable"`
		EcsChargeType    string `json:"EcsChargeType" xml:"EcsChargeType"`
		KeyPairName      string `json:"KeyPairName" xml:"KeyPairName"`
		SccClusterId     string `json:"SccClusterId" xml:"SccClusterId"`
		ClientVersion    string `json:"ClientVersion" xml:"ClientVersion"`
		ImageOwnerAlias  string `json:"ImageOwnerAlias" xml:"ImageOwnerAlias"`
		ImageId          string `json:"ImageId" xml:"ImageId"`
		EcsInfo          struct {
			Manager struct {
				Count        int    `json:"Count" xml:"Count"`
				InstanceType string `json:"InstanceType" xml:"InstanceType"`
			} `json:"Manager" xml:"Manager"`
			Compute struct {
				Count        int    `json:"Count" xml:"Count"`
				InstanceType string `json:"InstanceType" xml:"InstanceType"`
			} `json:"Compute" xml:"Compute"`
			Login struct {
				Count        int    `json:"Count" xml:"Count"`
				InstanceType string `json:"InstanceType" xml:"InstanceType"`
			} `json:"Login" xml:"Login"`
		} `json:"EcsInfo" xml:"EcsInfo"`
		ApplicationInfo struct {
			ApplicationInfoItem []struct {
				Tag     string `json:"Tag" xml:"Tag"`
				Name    string `json:"Name" xml:"Name"`
				Version string `json:"Version" xml:"Version"`
			} `json:"ApplicationInfoItem" xml:"ApplicationInfoItem"`
		} `json:"ApplicationInfo" xml:"ApplicationInfo"`
	} `json:"ClusterInfo" xml:"ClusterInfo"`
}

func CreateDescribeClusterRequest() (request *DescribeClusterRequest) {
	request = &DescribeClusterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("EHPC", "2017-07-14", "DescribeCluster", "ehs", "openAPI")
	return
}

func CreateDescribeClusterResponse() (response *DescribeClusterResponse) {
	response = &DescribeClusterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
