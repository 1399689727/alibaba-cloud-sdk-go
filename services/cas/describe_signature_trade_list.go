package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeSignatureTradeList invokes the cas.DescribeSignatureTradeList API synchronously
// api document: https://help.aliyun.com/api/cas/describesignaturetradelist.html
func (client *Client) DescribeSignatureTradeList(request *DescribeSignatureTradeListRequest) (response *DescribeSignatureTradeListResponse, err error) {
	response = CreateDescribeSignatureTradeListResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeSignatureTradeListWithChan invokes the cas.DescribeSignatureTradeList API asynchronously
// api document: https://help.aliyun.com/api/cas/describesignaturetradelist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeSignatureTradeListWithChan(request *DescribeSignatureTradeListRequest) (<-chan *DescribeSignatureTradeListResponse, <-chan error) {
	responseChan := make(chan *DescribeSignatureTradeListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeSignatureTradeList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeSignatureTradeListWithCallback invokes the cas.DescribeSignatureTradeList API asynchronously
// api document: https://help.aliyun.com/api/cas/describesignaturetradelist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeSignatureTradeListWithCallback(request *DescribeSignatureTradeListRequest, callback func(response *DescribeSignatureTradeListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeSignatureTradeListResponse
		var err error
		defer close(result)
		response, err = client.DescribeSignatureTradeList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeSignatureTradeListRequest is the request struct for api DescribeSignatureTradeList
type DescribeSignatureTradeListRequest struct {
	*requests.RpcRequest
	SourceIp    string           `position:"Query" name:"SourceIp"`
	ShowSize    requests.Integer `position:"Query" name:"ShowSize"`
	SearchType  string           `position:"Query" name:"SearchType"`
	CurrentPage requests.Integer `position:"Query" name:"CurrentPage"`
	Lang        string           `position:"Query" name:"Lang"`
	SearchValue string           `position:"Query" name:"SearchValue"`
}

// DescribeSignatureTradeListResponse is the response struct for api DescribeSignatureTradeList
type DescribeSignatureTradeListResponse struct {
	*responses.BaseResponse
	RequestId   string  `json:"RequestId" xml:"RequestId"`
	CurrentPage int     `json:"CurrentPage" xml:"CurrentPage"`
	ShowSize    int     `json:"ShowSize" xml:"ShowSize"`
	TotalCount  int     `json:"TotalCount" xml:"TotalCount"`
	TradeList   []Trade `json:"TradeList" xml:"TradeList"`
}

// CreateDescribeSignatureTradeListRequest creates a request to invoke DescribeSignatureTradeList API
func CreateDescribeSignatureTradeListRequest() (request *DescribeSignatureTradeListRequest) {
	request = &DescribeSignatureTradeListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2018-08-13", "DescribeSignatureTradeList", "cas_esign_fdd", "openAPI")
	return
}

// CreateDescribeSignatureTradeListResponse creates a response to parse from DescribeSignatureTradeList response
func CreateDescribeSignatureTradeListResponse() (response *DescribeSignatureTradeListResponse) {
	response = &DescribeSignatureTradeListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
