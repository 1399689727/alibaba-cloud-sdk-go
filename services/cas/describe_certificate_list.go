package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeCertificateList invokes the cas.DescribeCertificateList API synchronously
// api document: https://help.aliyun.com/api/cas/describecertificatelist.html
func (client *Client) DescribeCertificateList(request *DescribeCertificateListRequest) (response *DescribeCertificateListResponse, err error) {
	response = CreateDescribeCertificateListResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeCertificateListWithChan invokes the cas.DescribeCertificateList API asynchronously
// api document: https://help.aliyun.com/api/cas/describecertificatelist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCertificateListWithChan(request *DescribeCertificateListRequest) (<-chan *DescribeCertificateListResponse, <-chan error) {
	responseChan := make(chan *DescribeCertificateListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCertificateList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeCertificateListWithCallback invokes the cas.DescribeCertificateList API asynchronously
// api document: https://help.aliyun.com/api/cas/describecertificatelist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCertificateListWithCallback(request *DescribeCertificateListRequest, callback func(response *DescribeCertificateListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCertificateListResponse
		var err error
		defer close(result)
		response, err = client.DescribeCertificateList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeCertificateListRequest is the request struct for api DescribeCertificateList
type DescribeCertificateListRequest struct {
	*requests.RpcRequest
	SourceIp    string           `position:"Query" name:"SourceIp"`
	ShowSize    requests.Integer `position:"Query" name:"ShowSize"`
	CurrentPage requests.Integer `position:"Query" name:"CurrentPage"`
	Keyword     string           `position:"Query" name:"Keyword"`
	Lang        string           `position:"Query" name:"Lang"`
	Status      string           `position:"Query" name:"Status"`
}

// DescribeCertificateListResponse is the response struct for api DescribeCertificateList
type DescribeCertificateListResponse struct {
	*responses.BaseResponse
	RequestId       string        `json:"RequestId" xml:"RequestId"`
	TotalCount      int           `json:"TotalCount" xml:"TotalCount"`
	ShowSize        int           `json:"ShowSize" xml:"ShowSize"`
	CurrentPage     int           `json:"CurrentPage" xml:"CurrentPage"`
	CertificateList []Certificate `json:"CertificateList" xml:"CertificateList"`
}

// CreateDescribeCertificateListRequest creates a request to invoke DescribeCertificateList API
func CreateDescribeCertificateListRequest() (request *DescribeCertificateListRequest) {
	request = &DescribeCertificateListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2018-08-13", "DescribeCertificateList", "cas_esign_fdd", "openAPI")
	return
}

// CreateDescribeCertificateListResponse creates a response to parse from DescribeCertificateList response
func CreateDescribeCertificateListResponse() (response *DescribeCertificateListResponse) {
	response = &DescribeCertificateListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
