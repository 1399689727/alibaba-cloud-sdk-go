package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeCertificateDetail invokes the cas.DescribeCertificateDetail API synchronously
// api document: https://help.aliyun.com/api/cas/describecertificatedetail.html
func (client *Client) DescribeCertificateDetail(request *DescribeCertificateDetailRequest) (response *DescribeCertificateDetailResponse, err error) {
	response = CreateDescribeCertificateDetailResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeCertificateDetailWithChan invokes the cas.DescribeCertificateDetail API asynchronously
// api document: https://help.aliyun.com/api/cas/describecertificatedetail.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCertificateDetailWithChan(request *DescribeCertificateDetailRequest) (<-chan *DescribeCertificateDetailResponse, <-chan error) {
	responseChan := make(chan *DescribeCertificateDetailResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCertificateDetail(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeCertificateDetailWithCallback invokes the cas.DescribeCertificateDetail API asynchronously
// api document: https://help.aliyun.com/api/cas/describecertificatedetail.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCertificateDetailWithCallback(request *DescribeCertificateDetailRequest, callback func(response *DescribeCertificateDetailResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCertificateDetailResponse
		var err error
		defer close(result)
		response, err = client.DescribeCertificateDetail(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeCertificateDetailRequest is the request struct for api DescribeCertificateDetail
type DescribeCertificateDetailRequest struct {
	*requests.RpcRequest
	SourceIp      string           `position:"Query" name:"SourceIp"`
	CertificateId requests.Integer `position:"Query" name:"CertificateId"`
	Lang          string           `position:"Query" name:"Lang"`
}

// DescribeCertificateDetailResponse is the response struct for api DescribeCertificateDetail
type DescribeCertificateDetailResponse struct {
	*responses.BaseResponse
	RequestId     string `json:"RequestId" xml:"RequestId"`
	Id            int    `json:"Id" xml:"Id"`
	SourceType    string `json:"SourceType" xml:"SourceType"`
	InstanceId    string `json:"InstanceId" xml:"InstanceId"`
	Name          string `json:"Name" xml:"Name"`
	OrderId       int    `json:"OrderId" xml:"OrderId"`
	Year          int    `json:"Year" xml:"Year"`
	BeforeDate    int    `json:"BeforeDate" xml:"BeforeDate"`
	AfterDate     int    `json:"AfterDate" xml:"AfterDate"`
	FingerPrint   string `json:"FingerPrint" xml:"FingerPrint"`
	Domains       string `json:"Domains" xml:"Domains"`
	StatusCode    string `json:"StatusCode" xml:"StatusCode"`
	BrandName     string `json:"BrandName" xml:"BrandName"`
	CertType      string `json:"CertType" xml:"CertType"`
	RemainingDays int    `json:"RemainingDays" xml:"RemainingDays"`
}

// CreateDescribeCertificateDetailRequest creates a request to invoke DescribeCertificateDetail API
func CreateDescribeCertificateDetailRequest() (request *DescribeCertificateDetailRequest) {
	request = &DescribeCertificateDetailRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2018-08-13", "DescribeCertificateDetail", "cas_esign_fdd", "openAPI")
	return
}

// CreateDescribeCertificateDetailResponse creates a response to parse from DescribeCertificateDetail response
func CreateDescribeCertificateDetailResponse() (response *DescribeCertificateDetailResponse) {
	response = &DescribeCertificateDetailResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
