package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateOrderAudit invokes the cas.CreateOrderAudit API synchronously
// api document: https://help.aliyun.com/api/cas/createorderaudit.html
func (client *Client) CreateOrderAudit(request *CreateOrderAuditRequest) (response *CreateOrderAuditResponse, err error) {
	response = CreateCreateOrderAuditResponse()
	err = client.DoAction(request, response)
	return
}

// CreateOrderAuditWithChan invokes the cas.CreateOrderAudit API asynchronously
// api document: https://help.aliyun.com/api/cas/createorderaudit.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateOrderAuditWithChan(request *CreateOrderAuditRequest) (<-chan *CreateOrderAuditResponse, <-chan error) {
	responseChan := make(chan *CreateOrderAuditResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateOrderAudit(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateOrderAuditWithCallback invokes the cas.CreateOrderAudit API asynchronously
// api document: https://help.aliyun.com/api/cas/createorderaudit.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateOrderAuditWithCallback(request *CreateOrderAuditRequest, callback func(response *CreateOrderAuditResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateOrderAuditResponse
		var err error
		defer close(result)
		response, err = client.CreateOrderAudit(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateOrderAuditRequest is the request struct for api CreateOrderAudit
type CreateOrderAuditRequest struct {
	*requests.RpcRequest
	SourceIp string           `position:"Query" name:"SourceIp"`
	OrderId  requests.Integer `position:"Query" name:"OrderId"`
	Lang     string           `position:"Query" name:"Lang"`
	Type     string           `position:"Query" name:"Type"`
}

// CreateOrderAuditResponse is the response struct for api CreateOrderAudit
type CreateOrderAuditResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Type         string `json:"Type" xml:"Type"`
	CheckName    string `json:"CheckName" xml:"CheckName"`
	CheckValue   string `json:"CheckValue" xml:"CheckValue"`
	ModifiedTime string `json:"ModifiedTime" xml:"ModifiedTime"`
	CheckType    string `json:"CheckType" xml:"CheckType"`
	CheckName1   string `json:"CheckName1" xml:"CheckName1"`
	CheckName2   string `json:"CheckName2" xml:"CheckName2"`
}

// CreateCreateOrderAuditRequest creates a request to invoke CreateOrderAudit API
func CreateCreateOrderAuditRequest() (request *CreateOrderAuditRequest) {
	request = &CreateOrderAuditRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2018-08-13", "CreateOrderAudit", "cas_esign_fdd", "openAPI")
	return
}

// CreateCreateOrderAuditResponse creates a response to parse from CreateOrderAudit response
func CreateCreateOrderAuditResponse() (response *CreateOrderAuditResponse) {
	response = &CreateOrderAuditResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
