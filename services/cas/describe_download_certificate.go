package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDownloadCertificate invokes the cas.DescribeDownloadCertificate API synchronously
// api document: https://help.aliyun.com/api/cas/describedownloadcertificate.html
func (client *Client) DescribeDownloadCertificate(request *DescribeDownloadCertificateRequest) (response *DescribeDownloadCertificateResponse, err error) {
	response = CreateDescribeDownloadCertificateResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDownloadCertificateWithChan invokes the cas.DescribeDownloadCertificate API asynchronously
// api document: https://help.aliyun.com/api/cas/describedownloadcertificate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeDownloadCertificateWithChan(request *DescribeDownloadCertificateRequest) (<-chan *DescribeDownloadCertificateResponse, <-chan error) {
	responseChan := make(chan *DescribeDownloadCertificateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDownloadCertificate(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDownloadCertificateWithCallback invokes the cas.DescribeDownloadCertificate API asynchronously
// api document: https://help.aliyun.com/api/cas/describedownloadcertificate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeDownloadCertificateWithCallback(request *DescribeDownloadCertificateRequest, callback func(response *DescribeDownloadCertificateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDownloadCertificateResponse
		var err error
		defer close(result)
		response, err = client.DescribeDownloadCertificate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDownloadCertificateRequest is the request struct for api DescribeDownloadCertificate
type DescribeDownloadCertificateRequest struct {
	*requests.RpcRequest
	SourceIp      string           `position:"Query" name:"SourceIp"`
	ServerType    string           `position:"Query" name:"ServerType"`
	CertificateId requests.Integer `position:"Query" name:"CertificateId"`
	Lang          string           `position:"Query" name:"Lang"`
}

// DescribeDownloadCertificateResponse is the response struct for api DescribeDownloadCertificate
type DescribeDownloadCertificateResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	OssKey    string `json:"OssKey" xml:"OssKey"`
}

// CreateDescribeDownloadCertificateRequest creates a request to invoke DescribeDownloadCertificate API
func CreateDescribeDownloadCertificateRequest() (request *DescribeDownloadCertificateRequest) {
	request = &DescribeDownloadCertificateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2018-08-13", "DescribeDownloadCertificate", "cas_esign_fdd", "openAPI")
	return
}

// CreateDescribeDownloadCertificateResponse creates a response to parse from DescribeDownloadCertificate response
func CreateDescribeDownloadCertificateResponse() (response *DescribeDownloadCertificateResponse) {
	response = &DescribeDownloadCertificateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
