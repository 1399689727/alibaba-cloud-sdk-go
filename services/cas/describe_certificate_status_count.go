package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeCertificateStatusCount invokes the cas.DescribeCertificateStatusCount API synchronously
// api document: https://help.aliyun.com/api/cas/describecertificatestatuscount.html
func (client *Client) DescribeCertificateStatusCount(request *DescribeCertificateStatusCountRequest) (response *DescribeCertificateStatusCountResponse, err error) {
	response = CreateDescribeCertificateStatusCountResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeCertificateStatusCountWithChan invokes the cas.DescribeCertificateStatusCount API asynchronously
// api document: https://help.aliyun.com/api/cas/describecertificatestatuscount.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCertificateStatusCountWithChan(request *DescribeCertificateStatusCountRequest) (<-chan *DescribeCertificateStatusCountResponse, <-chan error) {
	responseChan := make(chan *DescribeCertificateStatusCountResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCertificateStatusCount(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeCertificateStatusCountWithCallback invokes the cas.DescribeCertificateStatusCount API asynchronously
// api document: https://help.aliyun.com/api/cas/describecertificatestatuscount.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeCertificateStatusCountWithCallback(request *DescribeCertificateStatusCountRequest, callback func(response *DescribeCertificateStatusCountResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCertificateStatusCountResponse
		var err error
		defer close(result)
		response, err = client.DescribeCertificateStatusCount(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeCertificateStatusCountRequest is the request struct for api DescribeCertificateStatusCount
type DescribeCertificateStatusCountRequest struct {
	*requests.RpcRequest
	SourceIp string `position:"Query" name:"SourceIp"`
	Lang     string `position:"Query" name:"Lang"`
}

// DescribeCertificateStatusCountResponse is the response struct for api DescribeCertificateStatusCount
type DescribeCertificateStatusCountResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId" xml:"RequestId"`
	Payed       int    `json:"Payed" xml:"Payed"`
	Checking    int    `json:"Checking" xml:"Checking"`
	CheckedFail int    `json:"CheckedFail" xml:"CheckedFail"`
	Issued      int    `json:"Issued" xml:"Issued"`
	Revoked     int    `json:"Revoked" xml:"Revoked"`
	Closed      int    `json:"Closed" xml:"Closed"`
	WillExpired int    `json:"WillExpired" xml:"WillExpired"`
	Expired     int    `json:"Expired" xml:"Expired"`
}

// CreateDescribeCertificateStatusCountRequest creates a request to invoke DescribeCertificateStatusCount API
func CreateDescribeCertificateStatusCountRequest() (request *DescribeCertificateStatusCountRequest) {
	request = &DescribeCertificateStatusCountRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2018-08-13", "DescribeCertificateStatusCount", "cas_esign_fdd", "openAPI")
	return
}

// CreateDescribeCertificateStatusCountResponse creates a response to parse from DescribeCertificateStatusCount response
func CreateDescribeCertificateStatusCountResponse() (response *DescribeCertificateStatusCountResponse) {
	response = &DescribeCertificateStatusCountResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
