package imm

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SearchImages invokes the imm.SearchImages API synchronously
// api document: https://help.aliyun.com/api/imm/searchimages.html
func (client *Client) SearchImages(request *SearchImagesRequest) (response *SearchImagesResponse, err error) {
	response = CreateSearchImagesResponse()
	err = client.DoAction(request, response)
	return
}

// SearchImagesWithChan invokes the imm.SearchImages API asynchronously
// api document: https://help.aliyun.com/api/imm/searchimages.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SearchImagesWithChan(request *SearchImagesRequest) (<-chan *SearchImagesResponse, <-chan error) {
	responseChan := make(chan *SearchImagesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SearchImages(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SearchImagesWithCallback invokes the imm.SearchImages API asynchronously
// api document: https://help.aliyun.com/api/imm/searchimages.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SearchImagesWithCallback(request *SearchImagesRequest, callback func(response *SearchImagesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SearchImagesResponse
		var err error
		defer close(result)
		response, err = client.SearchImages(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SearchImagesRequest is the request struct for api SearchImages
type SearchImagesRequest struct {
	*requests.RpcRequest
	Gender           string `position:"Query" name:"Gender"`
	RemarksAPrefix   string `position:"Query" name:"RemarksAPrefix"`
	Project          string `position:"Query" name:"Project"`
	OrderBy          string `position:"Query" name:"OrderBy"`
	ImageSizeRange   string `position:"Query" name:"ImageSizeRange"`
	RemarksBPrefix   string `position:"Query" name:"RemarksBPrefix"`
	TagNames         string `position:"Query" name:"TagNames"`
	SourceUriPrefix  string `position:"Query" name:"SourceUriPrefix"`
	LocationBoundary string `position:"Query" name:"LocationBoundary"`
	Emotion          string `position:"Query" name:"Emotion"`
	ImageTimeRange   string `position:"Query" name:"ImageTimeRange"`
	Marker           string `position:"Query" name:"Marker"`
	OCRContentsMatch string `position:"Query" name:"OCRContentsMatch"`
	CreateTimeRange  string `position:"Query" name:"CreateTimeRange"`
	SetId            string `position:"Query" name:"SetId"`
	SourceType       string `position:"Query" name:"SourceType"`
	UpdateTimeRange  string `position:"Query" name:"UpdateTimeRange"`
	AgeRange         string `position:"Query" name:"AgeRange"`
	Order            string `position:"Query" name:"Order"`
}

// SearchImagesResponse is the response struct for api SearchImages
type SearchImagesResponse struct {
	*responses.BaseResponse
	SetId      string       `json:"SetId" xml:"SetId"`
	NextMarker string       `json:"NextMarker" xml:"NextMarker"`
	RequestId  string       `json:"RequestId" xml:"RequestId"`
	Images     []ImagesItem `json:"Images" xml:"Images"`
}

// CreateSearchImagesRequest creates a request to invoke SearchImages API
func CreateSearchImagesRequest() (request *SearchImagesRequest) {
	request = &SearchImagesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("imm", "2017-09-06", "SearchImages", "2017-09-06", "openAPI")
	return
}

// CreateSearchImagesResponse creates a response to parse from SearchImages response
func CreateSearchImagesResponse() (response *SearchImagesResponse) {
	response = &SearchImagesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
