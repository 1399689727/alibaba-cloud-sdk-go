package ons

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) OnsMessagePageQueryByTopic(request *OnsMessagePageQueryByTopicRequest) (response *OnsMessagePageQueryByTopicResponse, err error) {
	response = CreateOnsMessagePageQueryByTopicResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) OnsMessagePageQueryByTopicWithChan(request *OnsMessagePageQueryByTopicRequest) (<-chan *OnsMessagePageQueryByTopicResponse, <-chan error) {
	responseChan := make(chan *OnsMessagePageQueryByTopicResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OnsMessagePageQueryByTopic(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) OnsMessagePageQueryByTopicWithCallback(request *OnsMessagePageQueryByTopicRequest, callback func(response *OnsMessagePageQueryByTopicResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OnsMessagePageQueryByTopicResponse
		var err error
		defer close(result)
		response, err = client.OnsMessagePageQueryByTopic(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type OnsMessagePageQueryByTopicRequest struct {
	*requests.RpcRequest
	EndTime      string `position:"Query" name:"EndTime"`
	Topic        string `position:"Query" name:"Topic"`
	PageSize     string `position:"Query" name:"PageSize"`
	OnsRegionId  string `position:"Query" name:"OnsRegionId"`
	BeginTime    string `position:"Query" name:"BeginTime"`
	TaskId       string `position:"Query" name:"TaskId"`
	PreventCache string `position:"Query" name:"PreventCache"`
	CurrentPage  string `position:"Query" name:"CurrentPage"`
	OnsPlatform  string `position:"Query" name:"OnsPlatform"`
}

type OnsMessagePageQueryByTopicResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	HelpUrl    string `json:"HelpUrl" xml:"HelpUrl"`
	MsgFoundDo struct {
		TaskId       string `json:"TaskId" xml:"TaskId"`
		MaxPageCount int64  `json:"MaxPageCount" xml:"MaxPageCount"`
		CurrentPage  int64  `json:"CurrentPage" xml:"CurrentPage"`
		MsgFoundList []struct {
			Topic          string `json:"Topic" xml:"Topic"`
			Flag           int    `json:"Flag" xml:"Flag"`
			Body           string `json:"Body" xml:"Body"`
			StoreSize      int    `json:"StoreSize" xml:"StoreSize"`
			BornTimestamp  int64  `json:"BornTimestamp" xml:"BornTimestamp"`
			BornHost       string `json:"BornHost" xml:"BornHost"`
			StoreTimestamp int64  `json:"StoreTimestamp" xml:"StoreTimestamp"`
			StoreHost      string `json:"StoreHost" xml:"StoreHost"`
			MsgId          string `json:"MsgId" xml:"MsgId"`
			OffsetId       string `json:"OffsetId" xml:"OffsetId"`
			BodyCRC        int    `json:"BodyCRC" xml:"BodyCRC"`
			ReconsumeTimes int    `json:"ReconsumeTimes" xml:"ReconsumeTimes"`
			PropertyList   []struct {
				Name  string `json:"Name" xml:"Name"`
				Value string `json:"Value" xml:"Value"`
			} `json:"PropertyList" xml:"PropertyList"`
		} `json:"MsgFoundList" xml:"MsgFoundList"`
	} `json:"MsgFoundDo" xml:"MsgFoundDo"`
}

func CreateOnsMessagePageQueryByTopicRequest() (request *OnsMessagePageQueryByTopicRequest) {
	request = &OnsMessagePageQueryByTopicRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ons", "2017-09-18", "OnsMessagePageQueryByTopic", "", "")
	return
}

func CreateOnsMessagePageQueryByTopicResponse() (response *OnsMessagePageQueryByTopicResponse) {
	response = &OnsMessagePageQueryByTopicResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
