package ons

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) OnsConsumerAccumulate(request *OnsConsumerAccumulateRequest) (response *OnsConsumerAccumulateResponse, err error) {
	response = CreateOnsConsumerAccumulateResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) OnsConsumerAccumulateWithChan(request *OnsConsumerAccumulateRequest) (<-chan *OnsConsumerAccumulateResponse, <-chan error) {
	responseChan := make(chan *OnsConsumerAccumulateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OnsConsumerAccumulate(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) OnsConsumerAccumulateWithCallback(request *OnsConsumerAccumulateRequest, callback func(response *OnsConsumerAccumulateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OnsConsumerAccumulateResponse
		var err error
		defer close(result)
		response, err = client.OnsConsumerAccumulate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type OnsConsumerAccumulateRequest struct {
	*requests.RpcRequest
	Detail       string `position:"Query" name:"Detail"`
	OnsRegionId  string `position:"Query" name:"OnsRegionId"`
	ConsumerId   string `position:"Query" name:"ConsumerId"`
	PreventCache string `position:"Query" name:"PreventCache"`
	OnsPlatform  string `position:"Query" name:"OnsPlatform"`
}

type OnsConsumerAccumulateResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	HelpUrl   string `json:"HelpUrl" xml:"HelpUrl"`
	Data      struct {
		Online            bool    `json:"Online" xml:"Online"`
		TotalDiff         int64   `json:"TotalDiff" xml:"TotalDiff"`
		ConsumeTps        float64 `json:"ConsumeTps" xml:"ConsumeTps"`
		LastTimestamp     int64   `json:"LastTimestamp" xml:"LastTimestamp"`
		DelayTime         int64   `json:"DelayTime" xml:"DelayTime"`
		DetailInTopicList []struct {
			Topic         string `json:"Topic" xml:"Topic"`
			TotalDiff     int64  `json:"TotalDiff" xml:"TotalDiff"`
			LastTimestamp int64  `json:"LastTimestamp" xml:"LastTimestamp"`
			DelayTime     int64  `json:"DelayTime" xml:"DelayTime"`
		} `json:"DetailInTopicList" xml:"DetailInTopicList"`
	} `json:"Data" xml:"Data"`
}

func CreateOnsConsumerAccumulateRequest() (request *OnsConsumerAccumulateRequest) {
	request = &OnsConsumerAccumulateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ons", "2017-09-18", "OnsConsumerAccumulate", "", "")
	return
}

func CreateOnsConsumerAccumulateResponse() (response *OnsConsumerAccumulateResponse) {
	response = &OnsConsumerAccumulateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
