package ons

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) OnsTraceGetResult(request *OnsTraceGetResultRequest) (response *OnsTraceGetResultResponse, err error) {
	response = CreateOnsTraceGetResultResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) OnsTraceGetResultWithChan(request *OnsTraceGetResultRequest) (<-chan *OnsTraceGetResultResponse, <-chan error) {
	responseChan := make(chan *OnsTraceGetResultResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OnsTraceGetResult(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) OnsTraceGetResultWithCallback(request *OnsTraceGetResultRequest, callback func(response *OnsTraceGetResultResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OnsTraceGetResultResponse
		var err error
		defer close(result)
		response, err = client.OnsTraceGetResult(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type OnsTraceGetResultRequest struct {
	*requests.RpcRequest
	OnsRegionId  string `position:"Query" name:"OnsRegionId"`
	QueryId      string `position:"Query" name:"QueryId"`
	PreventCache string `position:"Query" name:"PreventCache"`
	OnsPlatform  string `position:"Query" name:"OnsPlatform"`
}

type OnsTraceGetResultResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	HelpUrl   string `json:"HelpUrl" xml:"HelpUrl"`
	TraceData struct {
		QueryId    string `json:"QueryId" xml:"QueryId"`
		UserId     string `json:"UserId" xml:"UserId"`
		Topic      string `json:"Topic" xml:"Topic"`
		MsgId      string `json:"MsgId" xml:"MsgId"`
		MsgKey     string `json:"MsgKey" xml:"MsgKey"`
		Status     string `json:"Status" xml:"Status"`
		CreateTime int64  `json:"CreateTime" xml:"CreateTime"`
		UpdateTime int64  `json:"UpdateTime" xml:"UpdateTime"`
		TraceList  []struct {
			PubTime      int64  `json:"PubTime" xml:"PubTime"`
			Topic        string `json:"Topic" xml:"Topic"`
			PubGroupName string `json:"PubGroupName" xml:"PubGroupName"`
			MsgId        string `json:"MsgId" xml:"MsgId"`
			Tag          string `json:"Tag" xml:"Tag"`
			MsgKey       string `json:"MsgKey" xml:"MsgKey"`
			BornHost     string `json:"BornHost" xml:"BornHost"`
			CostTime     int    `json:"CostTime" xml:"CostTime"`
			Status       string `json:"Status" xml:"Status"`
			SubList      []struct {
				SubGroupName string `json:"SubGroupName" xml:"SubGroupName"`
				SuccessCount int    `json:"SuccessCount" xml:"SuccessCount"`
				FailCount    int    `json:"FailCount" xml:"FailCount"`
				ClientList   []struct {
					SubGroupName   string `json:"SubGroupName" xml:"SubGroupName"`
					SubTime        int64  `json:"SubTime" xml:"SubTime"`
					ClientHost     string `json:"ClientHost" xml:"ClientHost"`
					ReconsumeTimes int    `json:"ReconsumeTimes" xml:"ReconsumeTimes"`
					CostTime       int    `json:"CostTime" xml:"CostTime"`
					Status         string `json:"Status" xml:"Status"`
				} `json:"ClientList" xml:"ClientList"`
			} `json:"SubList" xml:"SubList"`
		} `json:"TraceList" xml:"TraceList"`
	} `json:"TraceData" xml:"TraceData"`
}

func CreateOnsTraceGetResultRequest() (request *OnsTraceGetResultRequest) {
	request = &OnsTraceGetResultRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ons", "2017-09-18", "OnsTraceGetResult", "", "")
	return
}

func CreateOnsTraceGetResultResponse() (response *OnsTraceGetResultResponse) {
	response = &OnsTraceGetResultResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
