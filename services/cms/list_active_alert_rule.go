package cms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListActiveAlertRule(request *ListActiveAlertRuleRequest) (response *ListActiveAlertRuleResponse, err error) {
	response = CreateListActiveAlertRuleResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListActiveAlertRuleWithChan(request *ListActiveAlertRuleRequest) (<-chan *ListActiveAlertRuleResponse, <-chan error) {
	responseChan := make(chan *ListActiveAlertRuleResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListActiveAlertRule(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListActiveAlertRuleWithCallback(request *ListActiveAlertRuleRequest, callback func(response *ListActiveAlertRuleResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListActiveAlertRuleResponse
		var err error
		defer close(result)
		response, err = client.ListActiveAlertRule(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListActiveAlertRuleRequest struct {
	*requests.RpcRequest
	Product string `position:"Query" name:"Product"`
	UserId  string `position:"Query" name:"UserId"`
}

type ListActiveAlertRuleResponse struct {
	*responses.BaseResponse
	Success    bool   `json:"Success" xml:"Success"`
	Code       string `json:"Code" xml:"Code"`
	Message    string `json:"Message" xml:"Message"`
	RequestId  string `json:"RequestId" xml:"RequestId"`
	Datapoints struct {
		Alarm []struct {
			Uuid               string `json:"Uuid" xml:"Uuid"`
			Name               string `json:"Name" xml:"Name"`
			Namespace          string `json:"Namespace" xml:"Namespace"`
			MetricName         string `json:"MetricName" xml:"MetricName"`
			Period             string `json:"Period" xml:"Period"`
			Statistics         string `json:"Statistics" xml:"Statistics"`
			ComparisonOperator string `json:"ComparisonOperator" xml:"ComparisonOperator"`
			Threshold          string `json:"Threshold" xml:"Threshold"`
			EvaluationCount    string `json:"EvaluationCount" xml:"EvaluationCount"`
			StartTime          string `json:"StartTime" xml:"StartTime"`
			EndTime            string `json:"EndTime" xml:"EndTime"`
			SilenceTime        string `json:"SilenceTime" xml:"SilenceTime"`
			NotifyType         string `json:"NotifyType" xml:"NotifyType"`
			Enable             string `json:"Enable" xml:"Enable"`
			State              string `json:"State" xml:"State"`
			ContactGroups      string `json:"ContactGroups" xml:"ContactGroups"`
			Webhook            string `json:"Webhook" xml:"Webhook"`
			RuleName           string `json:"RuleName" xml:"RuleName"`
		} `json:"Alarm" xml:"Alarm"`
	} `json:"Datapoints" xml:"Datapoints"`
}

func CreateListActiveAlertRuleRequest() (request *ListActiveAlertRuleRequest) {
	request = &ListActiveAlertRuleRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cms", "2017-03-01", "ListActiveAlertRule", "cms", "openAPI")
	return
}

func CreateListActiveAlertRuleResponse() (response *ListActiveAlertRuleResponse) {
	response = &ListActiveAlertRuleResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
