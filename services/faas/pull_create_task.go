package faas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) PullCreateTask(request *PullCreateTaskRequest) (response *PullCreateTaskResponse, err error) {
	response = CreatePullCreateTaskResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) PullCreateTaskWithChan(request *PullCreateTaskRequest) (<-chan *PullCreateTaskResponse, <-chan error) {
	responseChan := make(chan *PullCreateTaskResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PullCreateTask(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) PullCreateTaskWithCallback(request *PullCreateTaskRequest, callback func(response *PullCreateTaskResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PullCreateTaskResponse
		var err error
		defer close(result)
		response, err = client.PullCreateTask(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type PullCreateTaskRequest struct {
	*requests.RpcRequest
}

type PullCreateTaskResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Message   string `json:"Message" xml:"Message"`
	Status    string `json:"Status" xml:"Status"`
	Data      struct {
		AliyunId      string `json:"AliyunId" xml:"AliyunId"`
		FpgaImageUUID string `json:"FpgaImageUUID" xml:"FpgaImageUUID"`
		FpgaType      string `json:"FpgaType" xml:"FpgaType"`
		Bucket        string `json:"Bucket" xml:"Bucket"`
		Object        string `json:"Object" xml:"Object"`
		ShellUUID     string `json:"ShellUUID" xml:"ShellUUID"`
		RoleArn       string `json:"RoleArn" xml:"RoleArn"`
		Encrypted     bool   `json:"Encrypted" xml:"Encrypted"`
		KeyId         string `json:"KeyId" xml:"KeyId"`
		Email         string `json:"Email" xml:"Email"`
	} `json:"Data" xml:"Data"`
}

func CreatePullCreateTaskRequest() (request *PullCreateTaskRequest) {
	request = &PullCreateTaskRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("faas", "2017-08-24", "PullCreateTask", "", "")
	return
}

func CreatePullCreateTaskResponse() (response *PullCreateTaskResponse) {
	response = &PullCreateTaskResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
