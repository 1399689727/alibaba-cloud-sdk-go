package afs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeCaptchaDay(request *DescribeCaptchaDayRequest) (response *DescribeCaptchaDayResponse, err error) {
	response = CreateDescribeCaptchaDayResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeCaptchaDayWithChan(request *DescribeCaptchaDayRequest) (<-chan *DescribeCaptchaDayResponse, <-chan error) {
	responseChan := make(chan *DescribeCaptchaDayResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCaptchaDay(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeCaptchaDayWithCallback(request *DescribeCaptchaDayRequest, callback func(response *DescribeCaptchaDayResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCaptchaDayResponse
		var err error
		defer close(result)
		response, err = client.DescribeCaptchaDay(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeCaptchaDayRequest struct {
	*requests.RpcRequest
	ResourceOwnerId requests.Integer `position:"Query" name:"ResourceOwnerId"`
	SourceIp        string           `position:"Query" name:"SourceIp"`
	ConfigName      string           `position:"Query" name:"ConfigName"`
	Time            string           `position:"Query" name:"Time"`
	Type            string           `position:"Query" name:"Type"`
}

type DescribeCaptchaDayResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	BizCode    string `json:"BizCode" xml:"BizCode"`
	HasData    bool   `json:"HasData" xml:"HasData"`
	CaptchaDay struct {
		Init                        int `json:"Init" xml:"Init"`
		AskForVerify                int `json:"AskForVerify" xml:"AskForVerify"`
		DirecetStrategyInterception int `json:"DirecetStrategyInterception" xml:"DirecetStrategyInterception"`
		TwiceVerify                 int `json:"TwiceVerify" xml:"TwiceVerify"`
		Pass                        int `json:"Pass" xml:"Pass"`
		CheckTested                 int `json:"CheckTested" xml:"CheckTested"`
		UncheckTested               int `json:"UncheckTested" xml:"UncheckTested"`
		LegalSign                   int `json:"LegalSign" xml:"LegalSign"`
		MaliciousFlow               int `json:"MaliciousFlow" xml:"MaliciousFlow"`
	} `json:"CaptchaDay" xml:"CaptchaDay"`
}

func CreateDescribeCaptchaDayRequest() (request *DescribeCaptchaDayRequest) {
	request = &DescribeCaptchaDayRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("afs", "2018-01-12", "DescribeCaptchaDay", "", "")
	return
}

func CreateDescribeCaptchaDayResponse() (response *DescribeCaptchaDayResponse) {
	response = &DescribeCaptchaDayResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
