package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeDomainConfigs(request *DescribeDomainConfigsRequest) (response *DescribeDomainConfigsResponse, err error) {
	response = CreateDescribeDomainConfigsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeDomainConfigsWithChan(request *DescribeDomainConfigsRequest) (<-chan *DescribeDomainConfigsResponse, <-chan error) {
	responseChan := make(chan *DescribeDomainConfigsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDomainConfigs(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeDomainConfigsWithCallback(request *DescribeDomainConfigsRequest, callback func(response *DescribeDomainConfigsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDomainConfigsResponse
		var err error
		defer close(result)
		response, err = client.DescribeDomainConfigs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeDomainConfigsRequest struct {
	*requests.RpcRequest
	SecurityToken string `position:"Query" name:"SecurityToken"`
	DomainName    string `position:"Query" name:"DomainName"`
	Action        string `position:"Query" name:"Action"`
	ConfigList    string `position:"Query" name:"ConfigList"`
	OwnerId       string `position:"Query" name:"OwnerId"`
	AccessKeyId   string `position:"Query" name:"AccessKeyId"`
}

type DescribeDomainConfigsResponse struct {
	*responses.BaseResponse
	RequestId     string `json:"RequestId"`
	DomainConfigs struct {
		CcConfig struct {
			ConfigId string `json:"ConfigId"`
			Enable   string `json:"Enable"`
			AllowIps string `json:"AllowIps"`
			BlockIps string `json:"BlockIps"`
			Status   string `json:"Status"`
		} `json:"CcConfig"`
		ErrorPageConfig struct {
			ConfigId      string `json:"ConfigId"`
			ErrorCode     string `json:"ErrorCode"`
			PageType      string `json:"PageType"`
			CustomPageUrl string `json:"CustomPageUrl"`
			Status        string `json:"Status"`
		} `json:"ErrorPageConfig"`
		OptimizeConfig struct {
			ConfigId string `json:"ConfigId"`
			Enable   string `json:"Enable"`
			Status   string `json:"Status"`
		} `json:"OptimizeConfig"`
		PageCompressConfig struct {
			ConfigId string `json:"ConfigId"`
			Enable   string `json:"Enable"`
			Status   string `json:"Status"`
		} `json:"PageCompressConfig"`
		IgnoreQueryStringConfig struct {
			ConfigId    string `json:"ConfigId"`
			HashKeyArgs string `json:"HashKeyArgs"`
			Enable      string `json:"Enable"`
			Status      string `json:"Status"`
		} `json:"IgnoreQueryStringConfig"`
		RangeConfig struct {
			ConfigId string `json:"ConfigId"`
			Enable   string `json:"Enable"`
			Status   string `json:"Status"`
		} `json:"RangeConfig"`
		RefererConfig struct {
			ConfigId   string `json:"ConfigId"`
			ReferType  string `json:"ReferType"`
			ReferList  string `json:"ReferList"`
			AllowEmpty string `json:"AllowEmpty"`
			DisableAst string `json:"DisableAst"`
			Status     string `json:"Status"`
		} `json:"RefererConfig"`
		ReqAuthConfig struct {
			ConfigId         string `json:"ConfigId"`
			AuthType         string `json:"AuthType"`
			Key1             string `json:"Key1"`
			Key2             string `json:"Key2"`
			Status           string `json:"Status"`
			AliAuthWhiteList string `json:"AliAuthWhiteList"`
			AuthM3u8         string `json:"AuthM3u8"`
			AuthAddr         string `json:"AuthAddr"`
			AuthRemoteDesc   string `json:"AuthRemoteDesc"`
			TimeOut          string `json:"TimeOut"`
		} `json:"ReqAuthConfig"`
		SrcHostConfig struct {
			ConfigId   string `json:"ConfigId"`
			DomainName string `json:"DomainName"`
			Status     string `json:"Status"`
		} `json:"SrcHostConfig"`
		VideoSeekConfig struct {
			ConfigId string `json:"ConfigId"`
			Enable   string `json:"Enable"`
			Status   string `json:"Status"`
		} `json:"VideoSeekConfig"`
		WafConfig struct {
			ConfigId string `json:"ConfigId"`
			Enable   string `json:"Enable"`
			Status   string `json:"Status"`
		} `json:"WafConfig"`
		NotifyUrlConfig struct {
			Enable    string `json:"Enable"`
			NotifyUrl string `json:"NotifyUrl"`
		} `json:"NotifyUrlConfig"`
		RedirectTypeConfig struct {
			RedirectType string `json:"RedirectType"`
		} `json:"RedirectTypeConfig"`
		ForwardSchemeConfig struct {
			ConfigId         string `json:"ConfigId"`
			Enable           string `json:"Enable"`
			SchemeOrigin     string `json:"SchemeOrigin"`
			SchemeOriginPort string `json:"SchemeOriginPort"`
			Status           string `json:"Status"`
		} `json:"ForwardSchemeConfig"`
		RemoveQueryStringConfig struct {
			AliRemoveArgs string `json:"AliRemoveArgs"`
			ConfigId      string `json:"ConfigId"`
			Status        string `json:"Status"`
		} `json:"RemoveQueryStringConfig"`
		L2OssKeyConfig struct {
			PrivateOssAuth string `json:"PrivateOssAuth"`
			ConfigId       string `json:"ConfigId"`
			Status         string `json:"Status"`
		} `json:"L2OssKeyConfig"`
		MacServiceConfig struct {
			AppList       string `json:"AppList"`
			Enabled       string `json:"Enabled"`
			ProcessResult string `json:"ProcessResult"`
			ConfigId      string `json:"ConfigId"`
			Status        string `json:"Status"`
		} `json:"MacServiceConfig"`
		GreenManagerConfig struct {
			Enabled  string `json:"Enabled"`
			ConfigId string `json:"ConfigId"`
			Status   string `json:"Status"`
		} `json:"GreenManagerConfig"`
		HttpsOptionConfig struct {
			Http2    string `json:"Http2"`
			ConfigId string `json:"ConfigId"`
			Status   string `json:"Status"`
		} `json:"HttpsOptionConfig"`
		AliBusinessConfig struct {
			AliBusinessTable string `json:"AliBusinessTable"`
			AliBusinessType  string `json:"AliBusinessType"`
			ConfigId         string `json:"ConfigId"`
			Status           string `json:"Status"`
		} `json:"AliBusinessConfig"`
		IpAllowListConfig struct {
			ConfigId  string `json:"ConfigId"`
			IpList    string `json:"IpList"`
			IpAclXfwd string `json:"IpAclXfwd"`
			Status    string `json:"Status"`
		} `json:"IpAllowListConfig"`
		CacheExpiredConfigs []struct {
			ConfigId     string `json:"ConfigId"`
			CacheType    string `json:"CacheType"`
			CacheContent string `json:"CacheContent"`
			TTL          string `json:"TTL"`
			Weight       string `json:"Weight"`
			Status       string `json:"Status"`
		} `json:"CacheExpiredConfigs"`
		HttpErrorPageConfigs []struct {
			ConfigId  string `json:"ConfigId"`
			ErrorCode string `json:"ErrorCode"`
			PageUrl   string `json:"PageUrl"`
			Status    string `json:"Status"`
		} `json:"HttpErrorPageConfigs"`
		HttpHeaderConfigs []struct {
			ConfigId    string `json:"ConfigId"`
			HeaderKey   string `json:"HeaderKey"`
			HeaderValue string `json:"HeaderValue"`
			Status      string `json:"Status"`
		} `json:"HttpHeaderConfigs"`
		DynamicConfigs []struct {
			ConfigId            string `json:"ConfigId"`
			DynamicOrigin       string `json:"DynamicOrigin"`
			StaticType          string `json:"StaticType"`
			StaticUri           string `json:"StaticUri"`
			StaticPath          string `json:"StaticPath"`
			DynamicCacheControl string `json:"DynamicCacheControl"`
			Status              string `json:"Status"`
		} `json:"DynamicConfigs"`
		ReqHeaderConfigs []struct {
			ConfigId string `json:"ConfigId"`
			Key      string `json:"Key"`
			Value    string `json:"Value"`
			Status   string `json:"Status"`
		} `json:"ReqHeaderConfigs"`
		SetVarsConfigs []struct {
			ConfigId string `json:"ConfigId"`
			VarName  string `json:"VarName"`
			VarValue string `json:"VarValue"`
			Status   string `json:"Status"`
		} `json:"SetVarsConfigs"`
	} `json:"DomainConfigs"`
}

func CreateDescribeDomainConfigsRequest() (request *DescribeDomainConfigsRequest) {
	request = &DescribeDomainConfigsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "DescribeDomainConfigs", "", "")
	return
}

func CreateDescribeDomainConfigsResponse() (response *DescribeDomainConfigsResponse) {
	response = &DescribeDomainConfigsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
