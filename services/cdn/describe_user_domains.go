package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeUserDomains(request *DescribeUserDomainsRequest) (response *DescribeUserDomainsResponse, err error) {
	response = CreateDescribeUserDomainsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeUserDomainsWithChan(request *DescribeUserDomainsRequest) (<-chan *DescribeUserDomainsResponse, <-chan error) {
	responseChan := make(chan *DescribeUserDomainsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeUserDomains(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeUserDomainsWithCallback(request *DescribeUserDomainsRequest, callback func(response *DescribeUserDomainsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeUserDomainsResponse
		var err error
		defer close(result)
		response, err = client.DescribeUserDomains(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeUserDomainsRequest struct {
	*requests.RpcRequest
	FuncFilter       string `position:"Query" name:"FuncFilter"`
	Sources          string `position:"Query" name:"Sources"`
	DomainName       string `position:"Query" name:"DomainName"`
	OwnerId          string `position:"Query" name:"OwnerId"`
	FuncId           string `position:"Query" name:"FuncId"`
	PageNumber       string `position:"Query" name:"PageNumber"`
	DomainStatus     string `position:"Query" name:"DomainStatus"`
	AccessKeyId      string `position:"Query" name:"AccessKeyId"`
	DomainSearchType string `position:"Query" name:"DomainSearchType"`
	CheckDomainShow  string `position:"Query" name:"CheckDomainShow"`
	ResourceGroupId  string `position:"Query" name:"ResourceGroupId"`
	SecurityToken    string `position:"Query" name:"SecurityToken"`
	CdnType          string `position:"Query" name:"CdnType"`
	PageSize         string `position:"Query" name:"PageSize"`
	Action           string `position:"Query" name:"Action"`
}

type DescribeUserDomainsResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId"`
	PageNumber int64  `json:"PageNumber"`
	PageSize   int64  `json:"PageSize"`
	TotalCount int64  `json:"TotalCount"`
	Domains    []struct {
		DomainName      string   `json:"DomainName"`
		Cname           string   `json:"Cname"`
		CdnType         string   `json:"CdnType"`
		DomainStatus    string   `json:"DomainStatus"`
		GmtCreated      string   `json:"GmtCreated"`
		GmtModified     string   `json:"GmtModified"`
		Description     string   `json:"Description"`
		SourceType      string   `json:"SourceType"`
		SslProtocol     string   `json:"SslProtocol"`
		ResourceGroupId string   `json:"ResourceGroupId"`
		Sandbox         string   `json:"Sandbox"`
		Sources         []string `json:"Sources"`
	} `json:"Domains"`
}

func CreateDescribeUserDomainsRequest() (request *DescribeUserDomainsRequest) {
	request = &DescribeUserDomainsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "DescribeUserDomains", "", "")
	return
}

func CreateDescribeUserDomainsResponse() (response *DescribeUserDomainsResponse) {
	response = &DescribeUserDomainsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
