package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeDomainHitRateData(request *DescribeDomainHitRateDataRequest) (response *DescribeDomainHitRateDataResponse, err error) {
	response = CreateDescribeDomainHitRateDataResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeDomainHitRateDataWithChan(request *DescribeDomainHitRateDataRequest) (<-chan *DescribeDomainHitRateDataResponse, <-chan error) {
	responseChan := make(chan *DescribeDomainHitRateDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDomainHitRateData(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeDomainHitRateDataWithCallback(request *DescribeDomainHitRateDataRequest, callback func(response *DescribeDomainHitRateDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDomainHitRateDataResponse
		var err error
		defer close(result)
		response, err = client.DescribeDomainHitRateData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeDomainHitRateDataRequest struct {
	*requests.RpcRequest
	SecurityToken  string `position:"Query" name:"SecurityToken"`
	TimeMerge      string `position:"Query" name:"TimeMerge"`
	DomainName     string `position:"Query" name:"DomainName"`
	Action         string `position:"Query" name:"Action"`
	EndTime        string `position:"Query" name:"EndTime"`
	LocationNameEn string `position:"Query" name:"LocationNameEn"`
	Interval       string `position:"Query" name:"Interval"`
	StartTime      string `position:"Query" name:"StartTime"`
	IspNameEn      string `position:"Query" name:"IspNameEn"`
	OwnerId        string `position:"Query" name:"OwnerId"`
	AccessKeyId    string `position:"Query" name:"AccessKeyId"`
}

type DescribeDomainHitRateDataResponse struct {
	*responses.BaseResponse
	RequestId       string `json:"RequestId"`
	DomainName      string `json:"DomainName"`
	DataInterval    string `json:"DataInterval"`
	StartTime       string `json:"StartTime"`
	EndTime         string `json:"EndTime"`
	HitRateInterval []struct {
		TimeStamp string `json:"TimeStamp"`
		Value     string `json:"Value"`
	} `json:"HitRateInterval"`
}

func CreateDescribeDomainHitRateDataRequest() (request *DescribeDomainHitRateDataRequest) {
	request = &DescribeDomainHitRateDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "DescribeDomainHitRateData", "", "")
	return
}

func CreateDescribeDomainHitRateDataResponse() (response *DescribeDomainHitRateDataResponse) {
	response = &DescribeDomainHitRateDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
