package hpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (response *DescribeInstancesResponse, err error) {
	response = CreateDescribeInstancesResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) DescribeInstancesWithChan(request *DescribeInstancesRequest) (<-chan *DescribeInstancesResponse, <-chan error) {
	responseChan := make(chan *DescribeInstancesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeInstances(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) DescribeInstancesWithCallback(request *DescribeInstancesRequest, callback func(response *DescribeInstancesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeInstancesResponse
		var err error
		defer close(result)
		response, err = client.DescribeInstances(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type DescribeInstancesRequest struct {
	*requests.RpcRequest
	TOKEN        string `position:"Query" name:"TOKEN"`
	InstanceId   string `position:"Query" name:"InstanceId"`
	InstanceType string `position:"Query" name:"InstanceType"`
}

type DescribeInstancesResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Instances []struct {
		InstanceId                string `json:"InstanceId" xml:"InstanceId"`
		RegionId                  string `json:"RegionId" xml:"RegionId"`
		InstanceType              string `json:"InstanceType" xml:"InstanceType"`
		PackageId                 string `json:"PackageId" xml:"PackageId"`
		Status                    string `json:"Status" xml:"Status"`
		InnerIpAddress            string `json:"InnerIpAddress" xml:"InnerIpAddress"`
		JumpserverStatus          string `json:"JumpserverStatus" xml:"JumpserverStatus"`
		JumpserverInnerIpAddress  string `json:"JumpserverInnerIpAddress" xml:"JumpserverInnerIpAddress"`
		JumpServerPublicIpAddress string `json:"JumpServerPublicIpAddress" xml:"JumpServerPublicIpAddress"`
		CreationTime              string `json:"CreationTime" xml:"CreationTime"`
		ExpireTime                string `json:"ExpireTime" xml:"ExpireTime"`
	} `json:"Instances" xml:"Instances"`
}

func CreateDescribeInstancesRequest() (request *DescribeInstancesRequest) {
	request = &DescribeInstancesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("HPC", "2016-12-13", "DescribeInstances", "", "")
	return
}

func CreateDescribeInstancesResponse() (response *DescribeInstancesResponse) {
	response = &DescribeInstancesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
