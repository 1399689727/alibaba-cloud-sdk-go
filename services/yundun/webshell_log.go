package yundun

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) WebshellLog(request *WebshellLogRequest) (response *WebshellLogResponse, err error) {
	response = CreateWebshellLogResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) WebshellLogWithChan(request *WebshellLogRequest) (<-chan *WebshellLogResponse, <-chan error) {
	responseChan := make(chan *WebshellLogResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.WebshellLog(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) WebshellLogWithCallback(request *WebshellLogRequest, callback func(response *WebshellLogResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *WebshellLogResponse
		var err error
		defer close(result)
		response, err = client.WebshellLog(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type WebshellLogRequest struct {
	*requests.RpcRequest
	PageSize   string `position:"Query" name:"PageSize"`
	PageNumber string `position:"Query" name:"PageNumber"`
	InstanceId string `position:"Query" name:"InstanceId"`
	RecordType string `position:"Query" name:"RecordType"`
	JstOwnerId string `position:"Query" name:"JstOwnerId"`
}

type WebshellLogResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	PageNumber int    `json:"PageNumber" xml:"PageNumber"`
	PageSize   int    `json:"PageSize" xml:"PageSize"`
	TotalCount int    `json:"TotalCount" xml:"TotalCount"`
	LogList    []struct {
		Id     string `json:"Id" xml:"Id"`
		Path   string `json:"Path" xml:"Path"`
		Status int    `json:"Status" xml:"Status"`
		Time   string `json:"Time" xml:"Time"`
	} `json:"LogList" xml:"LogList"`
}

func CreateWebshellLogRequest() (request *WebshellLogRequest) {
	request = &WebshellLogRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Yundun", "2015-04-16", "WebshellLog", "", "")
	return
}

func CreateWebshellLogResponse() (response *WebshellLogResponse) {
	response = &WebshellLogResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
