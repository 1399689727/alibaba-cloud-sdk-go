package iot

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) UpdateDeviceOnlineState(request *UpdateDeviceOnlineStateRequest) (response *UpdateDeviceOnlineStateResponse, err error) {
	response = CreateUpdateDeviceOnlineStateResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) UpdateDeviceOnlineStateWithChan(request *UpdateDeviceOnlineStateRequest) (<-chan *UpdateDeviceOnlineStateResponse, <-chan error) {
	responseChan := make(chan *UpdateDeviceOnlineStateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.UpdateDeviceOnlineState(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) UpdateDeviceOnlineStateWithCallback(request *UpdateDeviceOnlineStateRequest, callback func(response *UpdateDeviceOnlineStateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *UpdateDeviceOnlineStateResponse
		var err error
		defer close(result)
		response, err = client.UpdateDeviceOnlineState(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type UpdateDeviceOnlineStateRequest struct {
	*requests.RpcRequest
	ProductKey  string `position:"Query" name:"ProductKey"`
	OnlineState string `position:"Query" name:"OnlineState"`
	DeviceName  string `position:"Query" name:"DeviceName"`
}

type UpdateDeviceOnlineStateResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Success      bool   `json:"Success" xml:"Success"`
	ErrorMessage string `json:"ErrorMessage" xml:"ErrorMessage"`
}

func CreateUpdateDeviceOnlineStateRequest() (request *UpdateDeviceOnlineStateRequest) {
	request = &UpdateDeviceOnlineStateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Iot", "2017-08-20", "UpdateDeviceOnlineState", "", "")
	return
}

func CreateUpdateDeviceOnlineStateResponse() (response *UpdateDeviceOnlineStateResponse) {
	response = &UpdateDeviceOnlineStateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
