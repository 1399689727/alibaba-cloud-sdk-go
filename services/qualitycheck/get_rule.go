package qualitycheck

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetRule(request *GetRuleRequest) (response *GetRuleResponse, err error) {
	response = CreateGetRuleResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetRuleWithChan(request *GetRuleRequest) (<-chan *GetRuleResponse, <-chan error) {
	responseChan := make(chan *GetRuleResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetRule(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetRuleWithCallback(request *GetRuleRequest, callback func(response *GetRuleResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetRuleResponse
		var err error
		defer close(result)
		response, err = client.GetRule(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetRuleRequest struct {
	*requests.RpcRequest
	JsonStr string `position:"Query" name:"JsonStr"`
}

type GetRuleResponse struct {
	*responses.BaseResponse
	RequestId string `json:"requestId" xml:"requestId"`
	Success   bool   `json:"success" xml:"success"`
	Code      string `json:"code" xml:"code"`
	Message   string `json:"message" xml:"message"`
	Data      struct {
		Rules []struct {
			Rid             string `json:"rid" xml:"rid"`
			RuleLambda      string `json:"ruleLambda" xml:"ruleLambda"`
			Name            string `json:"name" xml:"name"`
			Type            int    `json:"type" xml:"type"`
			Status          int    `json:"status" xml:"status"`
			IsDelete        int    `json:"isDelete" xml:"isDelete"`
			StartTime       string `json:"startTime" xml:"startTime"`
			EndTime         string `json:"endTime" xml:"endTime"`
			Weight          string `json:"weight" xml:"weight"`
			IsOnline        int    `json:"isOnline" xml:"isOnline"`
			CreateEmpid     string `json:"createEmpid" xml:"createEmpid"`
			CreateTime      string `json:"createTime" xml:"createTime"`
			LastUpdateTime  string `json:"lastUpdateTime" xml:"lastUpdateTime"`
			LastUpdateEmpid string `json:"lastUpdateEmpid" xml:"lastUpdateEmpid"`
			Comments        string `json:"comments" xml:"comments"`
			AutoReview      int    `json:"autoReview" xml:"autoReview"`
			RuleScoreType   int    `json:"ruleScoreType" xml:"ruleScoreType"`
			ScoreName       string `json:"scoreName" xml:"scoreName"`
			ScoreSubName    string `json:"scoreSubName" xml:"scoreSubName"`
		} `json:"rules" xml:"rules"`
	} `json:"data" xml:"data"`
}

func CreateGetRuleRequest() (request *GetRuleRequest) {
	request = &GetRuleRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Qualitycheck", "2016-08-01", "GetRule", "", "")
	return
}

func CreateGetRuleResponse() (response *GetRuleResponse) {
	response = &GetRuleResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
