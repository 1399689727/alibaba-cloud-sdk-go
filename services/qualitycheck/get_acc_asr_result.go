package qualitycheck

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetAccAsrResult(request *GetAccAsrResultRequest) (response *GetAccAsrResultResponse, err error) {
	response = CreateGetAccAsrResultResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetAccAsrResultWithChan(request *GetAccAsrResultRequest) (<-chan *GetAccAsrResultResponse, <-chan error) {
	responseChan := make(chan *GetAccAsrResultResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetAccAsrResult(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetAccAsrResultWithCallback(request *GetAccAsrResultRequest, callback func(response *GetAccAsrResultResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetAccAsrResultResponse
		var err error
		defer close(result)
		response, err = client.GetAccAsrResult(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetAccAsrResultRequest struct {
	*requests.RpcRequest
	JsonStr string `position:"Query" name:"JsonStr"`
}

type GetAccAsrResultResponse struct {
	*responses.BaseResponse
	RequestId string `json:"requestId" xml:"requestId"`
	Success   bool   `json:"success" xml:"success"`
	Code      string `json:"code" xml:"code"`
	Message   string `json:"message" xml:"message"`
	Count     int    `json:"count" xml:"count"`
	Data      []struct {
		RecordId     string `json:"recordId" xml:"recordId"`
		Status       string `json:"status" xml:"status"`
		StatusCode   string `json:"statusCode" xml:"statusCode"`
		ErrorMessage string `json:"errorMessage" xml:"errorMessage"`
		Results      []struct {
			BeginTime       int64  `json:"beginTime" xml:"beginTime"`
			EndTime         int64  `json:"endTime" xml:"endTime"`
			ChannelId       int    `json:"channelId" xml:"channelId"`
			Text            string `json:"text" xml:"text"`
			EmotionValue    int    `json:"emotionValue" xml:"emotionValue"`
			SilenceDuration int    `json:"silenceDuration" xml:"silenceDuration"`
			SpeechRate      int    `json:"speechRate" xml:"speechRate"`
			SpeakerId       string `json:"speakerId" xml:"speakerId"`
			AgentId         string `json:"agentId" xml:"agentId"`
			ChannelKey      string `json:"channelKey" xml:"channelKey"`
		} `json:"results" xml:"results"`
	} `json:"data" xml:"data"`
}

func CreateGetAccAsrResultRequest() (request *GetAccAsrResultRequest) {
	request = &GetAccAsrResultRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Qualitycheck", "2016-08-01", "GetAccAsrResult", "", "")
	return
}

func CreateGetAccAsrResultResponse() (response *GetAccAsrResultResponse) {
	response = &GetAccAsrResultResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
