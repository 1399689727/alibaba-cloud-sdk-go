package teslamaxcompute

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetQuotaInstance(request *GetQuotaInstanceRequest) (response *GetQuotaInstanceResponse, err error) {
	response = CreateGetQuotaInstanceResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetQuotaInstanceWithChan(request *GetQuotaInstanceRequest) (<-chan *GetQuotaInstanceResponse, <-chan error) {
	responseChan := make(chan *GetQuotaInstanceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetQuotaInstance(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetQuotaInstanceWithCallback(request *GetQuotaInstanceRequest, callback func(response *GetQuotaInstanceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetQuotaInstanceResponse
		var err error
		defer close(result)
		response, err = client.GetQuotaInstance(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetQuotaInstanceRequest struct {
	*requests.RpcRequest
	Cluster  string           `position:"Query" name:"Cluster"`
	PageSize requests.Integer `position:"Query" name:"PageSize"`
	QuotaId  string           `position:"Query" name:"QuotaId"`
	PageNum  requests.Integer `position:"Query" name:"PageNum"`
	Status   string           `position:"Query" name:"Status"`
}

type GetQuotaInstanceResponse struct {
	*responses.BaseResponse
	Code      int    `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Data      struct {
		Total  int `json:"Total" xml:"Total"`
		Detail []struct {
			Project         string  `json:"Project" xml:"Project"`
			InstanceId      string  `json:"InstanceId" xml:"InstanceId"`
			Status          string  `json:"Status" xml:"Status"`
			UserAccount     string  `json:"UserAccount" xml:"UserAccount"`
			NickName        string  `json:"NickName" xml:"NickName"`
			Cluster         string  `json:"Cluster" xml:"Cluster"`
			RunTime         string  `json:"RunTime" xml:"RunTime"`
			CpuUsed         int     `json:"CpuUsed" xml:"CpuUsed"`
			CpuRequest      int     `json:"CpuRequest" xml:"CpuRequest"`
			CpuUsedTotal    int     `json:"CpuUsedTotal" xml:"CpuUsedTotal"`
			CpuUsedRatioMax float64 `json:"CpuUsedRatioMax" xml:"CpuUsedRatioMax"`
			CpuUsedRatioMin float64 `json:"CpuUsedRatioMin" xml:"CpuUsedRatioMin"`
			MemUsed         int     `json:"MemUsed" xml:"MemUsed"`
			MemRequest      int     `json:"MemRequest" xml:"MemRequest"`
			MemUsedTotal    int     `json:"MemUsedTotal" xml:"MemUsedTotal"`
			MemUsedRatioMax float64 `json:"MemUsedRatioMax" xml:"MemUsedRatioMax"`
			MemUsedRatioMin float64 `json:"MemUsedRatioMin" xml:"MemUsedRatioMin"`
			TaskType        string  `json:"TaskType" xml:"TaskType"`
			SkynetId        string  `json:"SkynetId" xml:"SkynetId"`
			QuotaName       string  `json:"QuotaName" xml:"QuotaName"`
			QuotaId         int     `json:"QuotaId" xml:"QuotaId"`
		} `json:"Detail" xml:"Detail"`
	} `json:"Data" xml:"Data"`
}

func CreateGetQuotaInstanceRequest() (request *GetQuotaInstanceRequest) {
	request = &GetQuotaInstanceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("TeslaMaxCompute", "2018-01-04", "GetQuotaInstance", "", "")
	return
}

func CreateGetQuotaInstanceResponse() (response *GetQuotaInstanceResponse) {
	response = &GetQuotaInstanceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
