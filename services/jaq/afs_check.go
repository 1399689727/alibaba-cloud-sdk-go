package jaq

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) AfsCheck(request *AfsCheckRequest) (response *AfsCheckResponse, err error) {
	response = CreateAfsCheckResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) AfsCheckWithChan(request *AfsCheckRequest) (<-chan *AfsCheckResponse, <-chan error) {
	responseChan := make(chan *AfsCheckResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AfsCheck(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) AfsCheckWithCallback(request *AfsCheckRequest, callback func(response *AfsCheckResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AfsCheckResponse
		var err error
		defer close(result)
		response, err = client.AfsCheck(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type AfsCheckRequest struct {
	*requests.RpcRequest
	Platform   string `position:"Query" name:"Platform"`
	CallerName string `position:"Query" name:"CallerName"`
	Token      string `position:"Query" name:"Token"`
	Session    string `position:"Query" name:"Session"`
	Scene      string `position:"Query" name:"Scene"`
	Sig        string `position:"Query" name:"Sig"`
}

type AfsCheckResponse struct {
	*responses.BaseResponse
	ErrorCode int    `json:"ErrorCode" xml:"ErrorCode"`
	ErrorMsg  string `json:"ErrorMsg" xml:"ErrorMsg"`
	Data      bool   `json:"Data" xml:"Data"`
}

func CreateAfsCheckRequest() (request *AfsCheckRequest) {
	request = &AfsCheckRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("jaq", "2017-08-25", "AfsCheck", "", "")
	return
}

func CreateAfsCheckResponse() (response *AfsCheckResponse) {
	response = &AfsCheckResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
